<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Catyee&#39;s Tech Blog</title>
  <subtitle>学习与成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-14T01:38:17.581Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Catyee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阻塞队列 PriorityBlockingQueue</title>
    <link href="http://yoursite.com/2017/06/14/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%20PriorityBlockingQueue/"/>
    <id>http://yoursite.com/2017/06/14/阻塞队列 PriorityBlockingQueue/</id>
    <published>2017-06-14T01:37:23.000Z</published>
    <updated>2017-06-14T01:38:17.581Z</updated>
    
    <content type="html"><![CDATA[<p>PriorityBlockingQueue是一个基于优先级堆的无界的并发安全的优先级队列（FIFO），队列的元素按照其自然顺序进行排序，或者根据构造队列时提供的Comparator进行排序，具体取决于所使用的构造方法。PriorityBlockingQueue里面存储的对象必须是实现Comparable接口。队列通过这个接口的compare方法确定对象的priority。</p>
<p>PriorityBlockingQueue通过使用堆这种数据结构实现将队列中的元素按照某种排序规则进行排序，从而改变先进先出的队列顺序，提供开发者改变队列中元素的顺序的能力。队列中的元素必须是可比较的，即实现Comparable接口，或者在构建函数时提供可对队列元素进行比较的Comparator对象。</p>
<p>PriorityBlockingQueue通过内部组合PriorityQueue的方式实现优先级队列（private final PriorityQueue q;），另外在外层通过ReentrantLock实现线程安全，同时通过Condition实现阻塞唤醒。</p>
<p>具体实现请去看JDK源码。这里给出一篇源码分析的博客：<a href="http://blog.sina.com.cn/s/blog_6145ed8101010q1y.html">优先级对列PriorityBlockingQueue</a></p>
<p>要说明的一点是：<br><strong>PriorityBlockingQueue中若多个元素的优先级相同，则其顺序是不固定的，可以采用二级比较方法来进一步排序。</strong></p>
<p>有没有人在使用PriorityBlockingQueue时，发现将添加在PriorityBlockingQueue的一系列元素打印出来，队列的元素其实并不是全部按优先级排序的，但是队列头的优先级肯定是最高的？<br>回复：这就是因为PriorityBlockingQueue使用了堆来进行排序。只保证头元素是优先级最高的。</p>
<h1 id="利用PriorityBlockingQueue实现基于优先级的Executor类："><a href="#利用PriorityBlockingQueue实现基于优先级的Executor类：" class="headerlink" title="利用PriorityBlockingQueue实现基于优先级的Executor类："></a>利用PriorityBlockingQueue实现基于优先级的Executor类：</h1><p>使用Executor框架，只需要实现任务并将他们传递到执行器中，然后执行器将负责创建执行任务的线程，并执行这些线程。执行器内部使用一个阻塞队列存放等待执行的任务，并按任务到达执行器时的顺序进行存放。但是如果使用优先级队列存放任务，就可以使高优先级的任务先到达执行器，它会先被执行。</p>
<p>具体实现例子：<br>创建一个MyPriorityTask类，实现Runnable和Comparable类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Catyee on 2017/6/12.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPriorityTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Comparable</span>&lt;<span class="title">MyPriorityTask</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priority;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPriorityTask</span><span class="params">(<span class="keyword">int</span> priority, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.priority = priority;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPriority</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> priority;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(@NotNull MyPriorityTask o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getPriority() &gt; o.getPriority())&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getPriority() &lt; o.getPriority())&#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.printf(<span class="string">"MyPriorityTask: %s Priority : %d\n"</span>, name, priority);</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个类中重写了Comparable接口中的compareTo()方法，它接收一个MyPriorityTask对象作为参数，然后比较当前和参数对象的优先级值。让高优先级的任务先于低优先级的任务执行。同时重写了Runnable接口中的Run()方法，打印出信息并休眠2s。</p>
<p>创建一个Main主类，在里面声明TreadPoolExecutor，去执行任务：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.PriorityBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Catyee on 2017/6/12.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>, TimeUnit.SECONDS, <span class="keyword">new</span> PriorityBlockingQueue&lt;Runnable&gt;());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</div><div class="line">            MyPriorityTask task = <span class="keyword">new</span> MyPriorityTask(i, <span class="string">"Task "</span>+i);</div><div class="line">            executor.execute(task);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; <span class="number">8</span>; i++)&#123;</div><div class="line">            MyPriorityTask task = <span class="keyword">new</span> MyPriorityTask(i, <span class="string">"Task "</span>+i);</div><div class="line">            executor.execute(task);</div><div class="line">        &#125;</div><div class="line">        executor.shutdown();</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            executor.awaitTermination(<span class="number">1</span>, TimeUnit.DAYS);</div><div class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.printf(<span class="string">"Main: end of the program.\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里创建TreadPollExecutor对象的时候，要传入带Runnable泛型参数的PriorityBlockingQueue。先后创建了八个任务并赋予了不同的优先级，可以看到低优先级的先传入进线程池，但是会后于高优先级的任务执行。<br>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">MyPriorityTask: Task <span class="number">0</span> Priority : <span class="number">0</span></div><div class="line">MyPriorityTask: Task <span class="number">1</span> Priority : <span class="number">1</span></div><div class="line">MyPriorityTask: Task <span class="number">2</span> Priority : <span class="number">2</span></div><div class="line">MyPriorityTask: Task <span class="number">3</span> Priority : <span class="number">3</span></div><div class="line">MyPriorityTask: Task <span class="number">4</span> Priority : <span class="number">4</span></div><div class="line">MyPriorityTask: Task <span class="number">5</span> Priority : <span class="number">5</span></div><div class="line">MyPriorityTask: Task <span class="number">6</span> Priority : <span class="number">6</span></div><div class="line">MyPriorityTask: Task <span class="number">7</span> Priority : <span class="number">7</span></div><div class="line">Main: end of the program.</div><div class="line"></div><div class="line">Process finished with exit code <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>这里我们只创建了两个线程池执行器，当执行器空闲并等待任务时，第一批任务到达，它们将立即被执行。接下来，剩余任务基于他们优先级被依次执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PriorityBlockingQueue是一个基于优先级堆的无界的并发安全的优先级队列（FIFO），队列的元素按照其自然顺序进行排序，或者根据构造队列时提供的Comparator进行排序，具体取决于所使用的构造方法。PriorityBlockingQueue里面存储的对象
    
    </summary>
    
      <category term="java多线程" scheme="http://yoursite.com/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="阻塞队列" scheme="http://yoursite.com/tags/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    
      <category term="PriorityBlockingQueue" scheme="http://yoursite.com/tags/PriorityBlockingQueue/"/>
    
  </entry>
  
  <entry>
    <title>阻塞队列DealayQueue</title>
    <link href="http://yoursite.com/2017/06/13/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97DealayQueue/"/>
    <id>http://yoursite.com/2017/06/13/阻塞队列DealayQueue/</id>
    <published>2017-06-13T01:42:23.000Z</published>
    <updated>2017-06-14T01:37:26.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><p>阻塞队列（BlockingQueue）是那些支持持阻塞的插入和移除的队列。<br>1）支持阻塞的插入方法：意思是当队列满时，队列会阻塞插入元素的线程，直到队列不满。<br>2）支持阻塞的移除方法：意思是在队列为空时，获取元素的线程会等待队列变为非空。</p>
<p>阻塞队列常用于生产者和消费者的场景，生产者是向队列里添加元素的线程，消费者是从队列里取元素的线程。阻塞队列就是生产者用来存放元素、消费者用来获取元素的容器。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法/处理方式</th>
<th>抛出异常</th>
<th>返回特殊值</th>
<th>一直阻塞</th>
<th>超时退出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">插入方法</td>
<td>add(e)</td>
<td>offer(e)</td>
<td>put(e)</td>
<td>ofer(e,time,unit)</td>
</tr>
<tr>
<td style="text-align:left">移除方法</td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(time,unit)</td>
</tr>
<tr>
<td style="text-align:left">检查方法</td>
<td>element()</td>
<td>peek()</td>
<td>不可用</td>
<td>不可用</td>
</tr>
</tbody>
</table>
<p>·抛出异常：当队列满时，如果再往队列里插入元素，会抛出IllegalStateException（”Queuefull”）异常。当队列空时，从队列里获取元素会抛出NoSuchElementException异常。<br>·返回特殊值：当往队列插入元素时，会返回元素是否插入成功，成功返回true。如果是移除方法，则是从队列里取出一个元素，如果没有则返回null。<br>·一直阻塞：当阻塞队列满时，如果生产者线程往队列里put元素，队列会一直阻塞生产者线程，直到队列可用或者响应中断退出。当队列空时，如果消费者线程从队列里take元素，队列会阻塞住消费者线程，直到队列不为空。<br>·超时退出：当阻塞队列满时，如果生产者线程往队列里插入元素，队列会阻塞生产者线程一段时间，如果超过了指定的时间，生产者线程就会退出。</p>
<p><strong>注意:</strong>如果是无界阻塞队列，队列不可能会出现满的情况，所以使用put或offer方法永远不会被阻塞，而且使用offer方法时，该方法永远返回true。</p>
<p><strong>JDK 7中的阻塞队列：</strong></p>
<ul>
<li>ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列。</li>
<li>LinkedBlockingQueue：一个由链表结构组成的有界阻塞队列。</li>
<li>PriorityBlockingQueue：一个支持优先级排序的无界阻塞队列。</li>
<li>DelayQueue：一个使用优先级队列实现的无界阻塞队列。</li>
<li>SynchronousQueue：一个不存储元素的阻塞队列。</li>
<li>LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。</li>
<li>LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。</li>
</ul>
<h1 id="DelayQUeue"><a href="#DelayQUeue" class="headerlink" title="DelayQUeue"></a>DelayQUeue</h1><p>DelayQueue是一个无界的BlockingQueue，用于放置实现了Delayed接口的对象，队列使用PriorityQueue来实现。队列中的元素必须实现Delayed接口，在创建元素时可以指定多久才能从队列中获取当前元素。只有在延迟期满时才能从队列中提取元素。这种队列是有序的，即队头对象的延迟到期时间最长。注意：不能将null元素放置到这种队列中。DelayQueue非常有用，可以将DelayQueue运用在以下应用场景：</p>
<ul>
<li>缓存系统的设计：可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。</li>
<li>定时任务调度：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行，比如TimerQueue就是使用DelayQueue实现的。</li>
</ul>
<p>Delayed一种混合风格的接口，用来标记那些应该在给定延迟时间之后执行的对象。此接口的实现必须定义一个 compareTo方法，该方法提供与此接口的getDelay方法一致的排序。</p>
<h2 id="使用DelayQueue"><a href="#使用DelayQueue" class="headerlink" title="使用DelayQueue"></a>使用DelayQueue</h2><p><strong>一、实现Delayed接口：</strong><br>DelayQueue队列的元素必须实现Delayed接口。我们可以参考ScheduledThreadPoolExecutor里ScheduledFutureTask类的实现,首先，在对象创建的时候，初始化基本数据。使用time记录当前对象延迟到什么时候可以使用，使用sequenceNumber来标识元素在队列中的先后顺序。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong sequencer = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</div><div class="line"><span class="function">Scheduled <span class="title">FutureTask</span><span class="params">(Runnable r, V result, <span class="keyword">long</span> ns, <span class="keyword">long</span> period)</span> </span>&#123;</div><div class="line"><span class="function">Scheduled <span class="title">FutureTask</span><span class="params">(Runnable r, V result, <span class="keyword">long</span> ns, <span class="keyword">long</span> period)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(r, result);</div><div class="line">            <span class="keyword">this</span>.time = ns;</div><div class="line">            <span class="keyword">this</span>.period = period;</div><div class="line">            <span class="keyword">this</span>.sequence Number = sequencer.getAndIncrement();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二步：实现getDelay方法，该方法返回当前元素还需要延时多长时间，单位是纳秒，代码如下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> unit.convert(time - now(), Time Unit.NANOSECONDS);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>通过构造函数可以看出延迟时间参数ns的单位是纳秒，自己设计的时候最好使用纳秒，因为实现getDelay()方法时可以指定任意单位，一旦以秒或分作为单位，而延时时间又精确不到纳秒就麻烦了。使用时请注意当time小于当前时间时，getDelay会返回负数。<br>第三步：实现compareTo方法来指定元素的顺序。例如，让延时时间最长的放在队列的末尾。实现代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed other)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (other == <span class="keyword">this</span>)<span class="comment">// compare zero ONLY if same object</span></div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (other <span class="keyword">instanceof</span> Scheduled FutureTask) &#123;</div><div class="line">                Scheduled FutureTask&lt;&gt; x = (Scheduled FutureTask&lt;&gt;)other;</div><div class="line">                <span class="keyword">long</span> diff = time - x.time;</div><div class="line">                <span class="keyword">if</span> (diff &lt; <span class="number">0</span>)</div><div class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (diff &gt; <span class="number">0</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sequence Number &lt; x.sequence Number)</div><div class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">long</span> d = (getDelay(Time Unit.NANOSECONDS) -</div><div class="line">                        other.getDelay(Time Unit.NANOSECONDS));</div><div class="line">            <span class="keyword">return</span> (d == <span class="number">0</span>)  <span class="number">0</span> : ((d &lt; <span class="number">0</span>)  -<span class="number">1</span> : <span class="number">1</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p><strong>二、实现延时阻塞队列</strong><br>延时阻塞队列的实现很简单，当消费者从队列里获取元素时，如果元素没有达到延时时间，就阻塞当前线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> delay = first.getDelay(Time Unit.NANOSECONDS);</div><div class="line"><span class="keyword">if</span> (delay &lt;= <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> q.poll();</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (leader != <span class="keyword">null</span>)</div><div class="line">        available.await();</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    Thread thisThread = Thread.currentThread();</div><div class="line">    leader = thisThread;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">                available.awaitNanos(delay);</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="keyword">if</span> (leader == thisThread)</div><div class="line">                leader = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>代码中的变量leader是一个等待获取队列头部元素的线程。如果leader不等于空，表示已经有线程在等待获取队列的头元素。所以，使用await()方法让当前线程等待信号。如果leader等于空，则把当前线程设置成leader，并使用awaitNanos()方法让当前线程等待接收信号或等待delay时间。</p>
<h2 id="下面实现两种具体场景："><a href="#下面实现两种具体场景：" class="headerlink" title="下面实现两种具体场景："></a>下面实现两种具体场景：</h2><p>1、模拟一个考试的日子，考试时间为120分钟，30分钟后才可交卷，当时间到了，或学生都交完卷了考试结束。这个场景中几个点需要注意：</p>
<ul>
<li>考试时间为120分钟，30分钟后才可交卷，初始化考生完成试卷时间最小应为30分钟</li>
<li>对于能够在120分钟内交卷的考生，如何实现这些考生交卷</li>
<li>对于120分钟内没有完成考试的考生，在120分钟考试时间到后需要让他们强制交卷</li>
<li>在所有的考生都交完卷后，需要将控制线程关闭</li>
</ul>
<p>实现思想：用DelayQueue存储考生（Student类），每一个考生都有自己的名字和完成试卷的时间，Teacher线程对DelayQueue进行监控，收取完成试卷小于120分钟的学生的试卷。当考试时间120分钟到时，先关闭Teacher线程，然后强制DelayQueue中还存在的考生交卷。每一个考生交卷都会进行一次countDownLatch.countDown()，当countDownLatch.await()不再阻塞说明所有考生都交完卷了，而后结束考试。</p>
<p>Student类实现Runnable和Delayed接口，之后就可以存入DelayQueue中去了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Runnable</span>,<span class="title">Delayed</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workTime;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> submitTime;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isForce = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">long</span> workTime,CountDownLatch countDownLatch)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.workTime = workTime;</div><div class="line">        <span class="keyword">this</span>.submitTime = TimeUnit.NANOSECONDS.convert(workTime, </div><div class="line">                                        TimeUnit.NANOSECONDS)+System.nanoTime();</div><div class="line">        <span class="keyword">this</span>.countDownLatch = countDownLatch;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">if</span>(o == <span class="keyword">null</span> || ! (o <span class="keyword">instanceof</span> Student)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">        Student s = (Student)o;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.workTime &gt; s.workTime) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.workTime == s.workTime) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> unit.convert(submitTime - System.nanoTime(),  TimeUnit.NANOSECONDS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">if</span> (isForce) &#123;</div><div class="line">            System.out.println(name + <span class="string">" 交卷, 希望用时"</span> + workTime + <span class="string">"分钟"</span>+<span class="string">" ,实际用时 120分钟"</span> );</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(name + <span class="string">" 交卷, 希望用时"</span> + workTime + </div><div class="line">                                                <span class="string">"分钟"</span>+<span class="string">" ,实际用时 "</span>+workTime +<span class="string">" 分钟"</span>);  </div><div class="line">        &#125;</div><div class="line">        countDownLatch.countDown();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isForce</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isForce;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForce</span><span class="params">(<span class="keyword">boolean</span> isForce)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isForce = isForce;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Teacher类用来收取DelayQueue中时间到了的学生的试卷。也就是说一个学生如果用时大于30分钟小于120分钟，那么当时间到了的时候Teacheer类就会从QelayQueue中取出这个学生。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DelayQueue&lt;Student&gt; students;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(DelayQueue&lt;Student&gt; students)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.students = students;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">" test start"</span>);</div><div class="line">            <span class="keyword">while</span>(!Thread.interrupted())&#123;</div><div class="line">                students.take().run();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>EndExam类是强制交卷类，当考生用时超过120分钟就会强制从DelayQueue中取出来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EndExam</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DelayQueue&lt;Student&gt; students;</div><div class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</div><div class="line">    <span class="keyword">private</span> Thread teacherThread;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EndExam</span><span class="params">(DelayQueue&lt;Student&gt; students, <span class="keyword">long</span> workTime, </span></span></div><div class="line">                        CountDownLatch countDownLatch,Thread teacherThread) &#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">"强制收卷"</span>, workTime,countDownLatch);</div><div class="line">        <span class="keyword">this</span>.students = students;</div><div class="line">        <span class="keyword">this</span>.countDownLatch = countDownLatch;</div><div class="line">        <span class="keyword">this</span>.teacherThread = teacherThread;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        </div><div class="line">        teacherThread.interrupt();</div><div class="line">        Student tmpStudent;</div><div class="line">        <span class="keyword">for</span> (Iterator&lt;Student&gt; iterator2 = students.iterator(); iterator2.hasNext();) &#123;</div><div class="line">            tmpStudent = iterator2.next();</div><div class="line">            tmpStudent.setForce(<span class="keyword">true</span>);</div><div class="line">            tmpStudent.run();</div><div class="line">        &#125;</div><div class="line">        countDownLatch.countDown();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Exam是考试主类,包含一个main方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">int</span> studentNumber = <span class="number">20</span>;</div><div class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(studentNumber+<span class="number">1</span>);</div><div class="line">        DelayQueue&lt; Student&gt; students = <span class="keyword">new</span> DelayQueue&lt;Student&gt;();</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; studentNumber; i++) &#123;</div><div class="line">            students.put(<span class="keyword">new</span> Student(<span class="string">"student"</span>+(i+<span class="number">1</span>), <span class="number">30</span>+random.nextInt(<span class="number">120</span>),countDownLatch));</div><div class="line">        &#125;</div><div class="line">        Thread teacherThread =<span class="keyword">new</span> Thread(<span class="keyword">new</span> Teacher(students)); </div><div class="line">        students.put(<span class="keyword">new</span> EndExam(students, <span class="number">120</span>,countDownLatch,teacherThread));</div><div class="line">        teacherThread.start();</div><div class="line">        countDownLatch.await();</div><div class="line">        System.out.println(<span class="string">" 考试时间到，全部交卷！"</span>);  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2、具有过期时间的缓存</strong><br>向缓存添加内容时，给每一个key设定过期时间，系统自动将超过过期时间的key清除。这个场景中几个点需要注意：</p>
<ul>
<li>当向缓存中添加key-value对时，如果这个key在缓存中存在并且还没有过期，需要用这个key对应的新过期时间。</li>
<li>为了能够让DelayQueue将其已保存的key删除，需要重写实现Delayed接口可添加到DelayQueue的DelayedItem的hashCode函数和equals函数。</li>
<li>当缓存关闭，监控程序也应关闭，因而监控线程应当用守护线程。</li>
</ul>
<p>Cache主类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ConcurrentHashMap&lt;K, V&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;K, V&gt;();</div><div class="line">    <span class="keyword">public</span> DelayQueue&lt;DelayedItem&lt;K&gt;&gt; queue = <span class="keyword">new</span> DelayQueue&lt;DelayedItem&lt;K&gt;&gt;();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K k,V v,<span class="keyword">long</span> liveTime)</span></span>&#123;</div><div class="line">        V v2 = map.put(k, v);</div><div class="line">        DelayedItem&lt;K&gt; tmpItem = <span class="keyword">new</span> DelayedItem&lt;K&gt;(k, liveTime);</div><div class="line">        <span class="keyword">if</span> (v2 != <span class="keyword">null</span>) &#123;</div><div class="line">            queue.remove(tmpItem);</div><div class="line">        &#125;</div><div class="line">        queue.put(tmpItem);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cache</span><span class="params">()</span></span>&#123;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                dameonCheckOverdueKey();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        t.setDaemon(<span class="keyword">true</span>);</div><div class="line">        t.start();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dameonCheckOverdueKey</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            DelayedItem&lt;K&gt; delayedItem = queue.poll();</div><div class="line">            <span class="keyword">if</span> (delayedItem != <span class="keyword">null</span>) &#123;</div><div class="line">                map.remove(delayedItem.getT());</div><div class="line">                System.out.println(System.nanoTime()+<span class="string">" remove "</span>+</div><div class="line">                                delayedItem.getT() +<span class="string">" from cache"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">300</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">int</span> cacheNumber = <span class="number">10</span>;</div><div class="line">        <span class="keyword">int</span> liveTime = <span class="number">0</span>;</div><div class="line">        Cache&lt;String, Integer&gt; cache = <span class="keyword">new</span> Cache&lt;String, Integer&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cacheNumber; i++) &#123;</div><div class="line">            liveTime = random.nextInt(<span class="number">3000</span>);</div><div class="line">            System.out.println(i+<span class="string">"  "</span>+liveTime);</div><div class="line">            cache.put(i+<span class="string">""</span>, i, random.nextInt(liveTime));</div><div class="line">            <span class="keyword">if</span> (random.nextInt(cacheNumber) &gt; <span class="number">7</span>) &#123;</div><div class="line">                liveTime = random.nextInt(<span class="number">3000</span>);</div><div class="line">                System.out.println(i+<span class="string">"  "</span>+liveTime);</div><div class="line">                cache.put(i+<span class="string">""</span>, i, random.nextInt(liveTime));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Thread.sleep(<span class="number">3000</span>);</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>DelayedItem类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelayedItem</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Delayed</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> T t;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> liveTime ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> removeTime;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelayedItem</span><span class="params">(T t,<span class="keyword">long</span> liveTime)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.setT(t);</div><div class="line">        <span class="keyword">this</span>.liveTime = liveTime;</div><div class="line">        <span class="keyword">this</span>.removeTime = TimeUnit.NANOSECONDS.convert(liveTime, TimeUnit.NANOSECONDS) + </div><div class="line">                                        System.nanoTime();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span>  <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> DelayedItem)&#123;</div><div class="line">            DelayedItem&lt;T&gt; tmpDelayedItem = (DelayedItem&lt;T&gt;)o;</div><div class="line">            <span class="keyword">if</span> (liveTime &gt; tmpDelayedItem.liveTime ) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (liveTime == tmpDelayedItem.liveTime) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> diff = getDelay(TimeUnit.NANOSECONDS) - o.getDelay(TimeUnit.NANOSECONDS);</div><div class="line">        <span class="keyword">return</span> diff &gt; <span class="number">0</span> ? <span class="number">1</span>:diff == <span class="number">0</span>? <span class="number">0</span>:-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> unit.convert(removeTime - System.nanoTime(), unit);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setT</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.t = t;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> t.hashCode();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> DelayedItem) &#123;</div><div class="line">            <span class="keyword">return</span> object.hashCode() == hashCode() ?<span class="keyword">true</span>:<span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;阻塞队列&quot;&gt;&lt;a href=&quot;#阻塞队列&quot; class=&quot;headerlink&quot; title=&quot;阻塞队列&quot;&gt;&lt;/a&gt;阻塞队列&lt;/h1&gt;&lt;p&gt;阻塞队列（BlockingQueue）是那些支持持阻塞的插入和移除的队列。&lt;br&gt;1）支持阻塞的插入方法：意思是当队列满时，
    
    </summary>
    
      <category term="java多线程" scheme="http://yoursite.com/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="阻塞队列" scheme="http://yoursite.com/tags/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    
      <category term="DelayQUeue" scheme="http://yoursite.com/tags/DelayQUeue/"/>
    
  </entry>
  
  <entry>
    <title>Spring实战（四） 通过Java代码装配Bean</title>
    <link href="http://yoursite.com/2017/06/09/Spring%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%89%EF%BC%89%20%E9%80%9A%E8%BF%87Java%E4%BB%A3%E7%A0%81%E8%A3%85%E9%85%8DBean/"/>
    <id>http://yoursite.com/2017/06/09/Spring实战（三） 通过Java代码装配Bean/</id>
    <published>2017-06-09T01:44:26.000Z</published>
    <updated>2017-06-09T01:45:01.878Z</updated>
    
    <content type="html"><![CDATA[<p>尽管在很多场景下通过组件扫描和自动装配实现Spring的自动化配置是更为推荐的方式，但有时候自动化配置的方案行不通，因此需要明确配置Spring。比如说，你想要将第三方库中的组件装配到你的应用中，在这种情况下，是没有办法在它的类上添加@Component和@Autowired注解的，因此就不能使用自动化装配的方案了。</p>
<p>在这种情况下，你必须要采用显式装配的方式。在进行显式配置的时候，有两种可选方案：Java和XML。<br>就像我之前所说的，在进行显式配置时，JavaConfig是更好的方案，因为它更为强大、类型安全并且对重构友好。因为它就是Java代码，就像应用程序中的其他Java代码一样。</p>
<p>同时，JavaConfig与其他的Java代码又有所区别，在概念上，它与应用程序中的业务逻辑和领域代码是不同的。尽管它与其他的组件一样都使用相同的语言进行表述，但JavaConfig是配置代码。这意味着它不应该包含任何业务逻辑，Java Config也不应该侵入到业务逻辑代码之中。尽管不是必须的，但通常会将JavaConfig放到单独的包中，使它与其他的应用程序逻辑分离开来，这样对于它的意图就不会产生困惑了。</p>
<p>接下来，让我们看一下如何通过JavaConfig显式配置Spring，之前写过一个CDPlayerConfig的配置类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> soundsystem</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建JavaConfig类的关键在于为其添加@Configuration注解，@Configuration注解表明这个类是一个配置类，该类应该包含在Spring应用上下文中如何创建bean的细节。之前，我们都是依赖组件扫描来发现Spring应该创建的bean。尽管我们可以同时使用组件扫描和显式配置，但是在本节中，我们更加关注于显式配置，因此我将CDPlayerConfig的@ComponentScan注解移除掉了。<br>移除了@ComponentScan注解，此时的CDPlayerConfig类就没有任何作用了。如果你现在运行CDPlayerTest的话，测试会失败，并且会出现BeanCreationException异常。测试期望被注入CDPlayer和CompactDisc，但是这些b<br>ean根本就没有创建，因为组件扫描不会发现它们。<br>要如何使用JavaConfig装配CDPlayer和CompactDisc呢？</p>
<h2 id="声明简单的Bean"><a href="#声明简单的Bean" class="headerlink" title="声明简单的Bean"></a>声明简单的Bean</h2><p>要在JavaConfig中声明bean，我们需要编写一个方法，这个方法会创建所需类型的实例，然后给这个方法添加<br>@Bean注解。比方说，下面的代码声明了CompactDisc bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtpeppers</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Sgtpeppers();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Bean注解会告诉Spring这个方法将会返回一个对象，该对象要注册为Spring应用上下文中的bean。方法体中包含了最终产生bean实例的逻辑。默认情况下，bean的ID与带有@Bean注解的方法名是一样的。在本例中，bean的名字将会是sgtPeppers。如果你想为其设置成一个不同的名字的话，那么可以重命名该方法，也可以通过name属性指定一个不同的名字：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>(name=<span class="string">"lonelyHeartsClubBand"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtpeppers</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Sgtpeppers();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不管你采用什么方法来为bean命名，bean声明都是非常简单的。方法体返回了一个新的SgtPeppers实例。这里是使用Java来进行描述的，因此我们可以发挥Java提供的所有功能，只要最终生成一个CompactDisc实例即可。</p>
<p>请稍微发挥一下你的想象力，我们可能希望做一点稍微疯狂的事情，比如说，在一组CD中随机选择一个CompactDisc来播放：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function">publci CompactDisc <span class="title">randomBeatlesCD</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> choice = (<span class="keyword">int</span>) Math.floor(Math.random()*<span class="number">4</span>);</div><div class="line">    <span class="keyword">if</span>(choice == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HardDaysNight();</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Revolver();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WhiteAlbum();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="借助JavaConfig实现注入"><a href="#借助JavaConfig实现注入" class="headerlink" title="借助JavaConfig实现注入"></a>借助JavaConfig实现注入</h2><p>我们前面所声明的CompactDisc bean是非常简单的，它自身没有其他的依赖。但现在，我们需要声明CDPlayerbean，它依赖于CompactDisc。在JavaConfig中，要如何将它们装配在一起呢?<br>在JavaConfig中装配bean的最简单方式就是引用创建bean的方法。例如，下面就是一种声明CDPlayer的可行方案：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CDPlayeer <span class="title">cdPlayer</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(sgtPeppers());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>cdPlayer()方法像sgtPeppers()方法一样，同样使用了@Bean注解，这表明这个方法会创建一个bean实例并将其注册到Spring应用上下文中。所创建的beanID为cdPlayer，与方法的名字相同。</p>
<p>看起来，CompactDisc是通过调用sgtPeppers()得到的，但情况并非完全如此。因为sgtPeppers()方法上添加了@Bean注解，Spring将会拦截所有对它的调用，并确保直接返回该方法所创建的bean，而不是每次都对其进行实际的调用。比如说，假设你引入了一个其他的CDPlayer bean，它和之前的那个bean完全一样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CDPlayeer <span class="title">cdPlayer</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(sgtPeppers());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CDPlayeer <span class="title">anothorCDPlayer</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(sgtPeppers());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>假如对sgtPeppers()的调用就像其他的Java方法调用一样的话，那么每个CDPlayer实例都会有一个自己特有的<br>SgtPeppers实例。如果我们讨论的是实际的CD播放器和CD光盘的话，这么做是有意义的。如果你有两台CD播放器，在物理上并没有办法将同一张CD光盘放到两个CD播放器中。</p>
<p>但是，在软件领域中，我们完全可以将同一个SgtPeppers实例注入到任意数量的其他bean之中。默认情况下，Spring中的bean都是单例的，我们并没有必要为第二个CDPlayerbean创建完全相同的SgtPeppers实例。所以，Spring会拦截对sgtPeppers()的调用并确保返回的是Spring所创建的bean，也就是Spring本身在调用sgtPeppers()时所创建的CompactDiscbean。因此，两个CDPlayer bean会得到相同的SgtPeppers实例。</p>
<p>可以看到，通过调用方法来引用bean的方式有点令人困惑。其实还有一种理解起来更为简单的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(compactDisc);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里，cdPlayer()方法请求一个CompactDisc作为参数。当Spring调用cdPlayer()创建CDPlayerbean的时候，它会自动装配一个CompactDisc到配置方法之中。然后，方法体就可以按照合适的方式来使用它。借助这种技术，cdPlayer()方法也能够将CompactDisc注入到CDPlayer的构造器中，而且不用明确引用CompactDisc的@Bean方法。</p>
<p>通过这种方式引用其他的bean通常是最佳的选择，因为它不会要求将CompactDisc声明到同一个配置类之中。在这里甚至没有要求CompactDisc必须要在JavaConfig中声明，实际上它可以通过组件扫描功能自动发现或者通过XML来进行配置。你可以将配置分散到多个配置类、XML文件以及自动扫描和装配bean之中，只要功能完整健全即可。不管CompactDisc是采用什么方式创建出来的，Spring都会将其传入到配置方法中，并用来创建CDPlayer bean。</p>
<p>另外，需要提醒的是，我们在这里使用CDPlayer的构造器实现了DI功能，但是我们完全可以采用其他风格的D<br>I配置。比如说，如果你想通过Setter方法注入CompactDisc的话，那么代码看起来应该是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</div><div class="line">    CDPlayer cdPlayer = <span class="keyword">new</span> CDPlayer();</div><div class="line">    cdPlayer.setCompactDisc(compactDisc);</div><div class="line">    <span class="keyword">return</span> cdPlayer;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>带有@Bean注解的方法可以采用任何必要的Java功能来产生bean实例。构造器和Setter方法只是@Bean方法的两个简单样例。这里所存在的可能性仅仅受到Java语言的限制。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽管在很多场景下通过组件扫描和自动装配实现Spring的自动化配置是更为推荐的方式，但有时候自动化配置的方案行不通，因此需要明确配置Spring。比如说，你想要将第三方库中的组件装配到你的应用中，在这种情况下，是没有办法在它的类上添加@Component和@Autowire
    
    </summary>
    
      <category term="java读书笔记" scheme="http://yoursite.com/categories/java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Bean" scheme="http://yoursite.com/tags/Bean/"/>
    
      <category term="Java装配" scheme="http://yoursite.com/tags/Java%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Spring实战（三） 自动装配Bean</title>
    <link href="http://yoursite.com/2017/06/09/Spring%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%89%EF%BC%89%20%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8DBean/"/>
    <id>http://yoursite.com/2017/06/09/Spring实战（三） 自动装配Bean/</id>
    <published>2017-06-09T00:53:26.000Z</published>
    <updated>2017-06-09T00:54:04.124Z</updated>
    
    <content type="html"><![CDATA[<p>在Spring中，对象无需自己查找或创建与其所关联的其他对象。相反，容器负责把需要相互协作的对象引用赋予各个对象。例如，一个订单管理组件需要信用卡认证组件，但它不需要自己创建信用卡认证组件。订单管理组件只需要表明自己两手空空，容器就会主动赋予它一个信用卡认证组件。创建应用对象之间协作关系的行为通常称为装配（wiring），这也是依赖注入（DI）的本质。</p>
<h1 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h1><p>Spring容器负责创建应用程序中的bean并通过DI来协调这些对象之间的关系。但是，作为开发人员，你需要告诉Spring要创建哪些bean并且如何将其装配在一起。当描述bean如何进行装配时，Spring具有非常大的灵活性，它提供了三种主要的装配机制：</p>
<ul>
<li>在XML中进行显式配置。</li>
<li>在Java中进行显式配置。</li>
<li>隐式的bean发现机制和自动装配。</li>
</ul>
<p>Spring的配置风格是可以互相搭配的，所以你可以选择使用XML装配一些bean，使用Spring基于Java的配置（JavaConfig）来装配另一些bean，而将剩余的bean让Spring去自动发现。<br>即便如此，我的建议是尽可能地使用自动配置的机制。显式配置越少越好。当你必须要显式配置bean的时候（比如，有些源码不是由你来维护的，而当你需要为这些代码配置bean的时候），我推荐使用类型安全并且比XML更加强大的JavaConfig。最后，只有当你想要使用便利的XML命名空间，并且在JavaConfig中没有同样的实现时，才应该使用XML。</p>
<h1 id="自动装配Bean"><a href="#自动装配Bean" class="headerlink" title="自动装配Bean"></a>自动装配Bean</h1><p>Spring从两个角度来实现自动化装配：</p>
<ul>
<li>组件扫描（component scanning）：Spring会自动发现应用上下文中所创建的bean。</li>
<li>自动装配（autowiring）：Spring自动满足bean之间的依赖。</li>
</ul>
<p>为了阐述组件扫描和装配，我们需要创建几个bean，它们代表了一个音响系统中的组件。首先，要创建CompactDisc类，Spring会发现它并将其创建为一个bean。然后，会创建一个CDPlayer类，让Spring发现它，并将CompactDisc bean注入进来。</p>
<p><strong>创建可被发现的Bean</strong><br>现在有一个CD播放器，需要插入CD才能播放。也就是说CD播放器依赖于CD才能完成它的使命。<br>先写一个CompactDisc类，它是定义CD的一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> soundsystem</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span> play;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们可以创建多个CD的实现，比如可以是摇滚类的也可以是古典类的，它们都要实现CD的上层接口：CompactDisc。这里只创建一个实现——SgtPeppers类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> soundsystem;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> String title = <span class="string">"Sgt. Pepper's Lonely Hearts Club Band"</span>;  </div><div class="line">  <span class="keyword">private</span> String artist = <span class="string">"The Beatles"</span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Playing "</span> + title + <span class="string">" by "</span> + artist);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SgtPeppers类上使用了@Component注解。这个简单的注解表明该类会作为组件类，并告知Spring要为这个类创建bean。没有必要显式配置SgtPeppers bean，因为这个类使用了@Component注解，所以Spring会为你把事情处理妥当。<br>不过，组件扫描默认是不启用的。我们还需要显式配置一下Spring，从而命令它去寻找带有@Component注解的类，并为其创建bean,CDPlayerConfig类完成了这个工作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> soundsystem;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>类CDPlayerConfig通过Java代码定义了Spring的装配规则。但是CDPlayerConfig类并没有显式地声明任何bean，而是使用了@ComponentScan注解，这个注解能够在Spring中启用组件扫描。如果没有其他配置的话，@ComponentScan默认会扫描与配置类相同的包。因为CDPlayerConfig类位于soundsystem包中，因此Spring将会扫描这个包以及这个包下的所有子包，查找带有@Component注解的类。这样的话，就能发现CompactDisc，并且会在Spring中自动为其创建一个bean。</p>
<p>这个工作也可以用xml配置来完成：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">  <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></div><div class="line">  <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"soundsystem"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>现在就可以创建一个测试类来试着尝试现有的功能了。在这个JUnit测试类中，先会创建Spring上下文，然后判断CompactDisc是不是真的创建出来了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> soundsystem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes=CDPlayerConfig.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> CompactDisc cd;</div><div class="line">  </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cdShouldNotBeNull</span><span class="params">()</span> </span>&#123;</div><div class="line">    assertNotNull(cd);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CDPlayerTest使用了Spring的SpringJUnit4ClassRunner，以便在测试开始的时候自动创建Spring的应用上下文。注解@ContextConfiguration会告诉它需要在CDPlayerConfig中加载配置。因为CDPlayerConfig类中包含了@ComponentScan，因此最终的应用上下文中应该包含CompactDisc bean。为了证明这一点，在测试代码中有一个CompactDisc类型的属性，并且这个属性带有@Autowired注解，以便于将CompactDiscbean注入到测试代码之中（稍后，我会讨论@Autowired）。最后，会有一个简单的测试方法断言cd属性不为null。如果它不为null的话，就意味着Spring能够发现CompactDisc类，自动在Spring上下文中将其创建为bean并将其注入到测试代码之中。</p>
<p>尽管我们只用它创建了一个bean，但同样是这么少的配置能够用来发现和创建任意数量的bean。在soundsystem<br>包及其子包中，所有带有@Component注解的类都会创建为bean。只添加一行@Component Scan注解就能自动创建无数个bean，这种权衡还是很划算的。</p>
<p>但是使用@ComponentScan和@Component组件扫描还能做别的事情：<br><strong>为组件扫描的Bean命名</strong><br>Spring应用上下文中所有的bean都会给定一个ID。在前面的例子中，尽管我们没有明确地为SgtPeppersbean设置ID，但Spring会根据类名为其指定一个ID。具体来讲，这个bean所给定的ID为sgtPeppers，也就是将类名的第一个字母变为小写。如果想为这个bean设置不同的ID，你所要做的就是将期望的ID作为值传递给@Component<br>注解。比如说，如果想将这个bean标识为lonelyHeartsClub，那么你需要将SgtPeppers类的@Component注解配置为如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"lonelyHeartsClub"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还有另外一种为bean命名的方式，这种方式不使用@Component注解，而是使用Java依赖注入规范（Java Dependency Injection）中所提供的@Named注解来为bean设置ID：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> soundsystem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.inject.Named;</div><div class="line"></div><div class="line"><span class="meta">@Named</span>(<span class="string">"lonelyHeartsClub"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Spring支持将@Named作为@Component注解的替代方案。两者之间有一些细微的差异，但是在大多数场景中，它们是可以互相替换的。</p>
<p><strong>设置组件扫描的的基础包</strong><br>到现在为止，我们没有为@ComponentScan设置任何属性。这意味着，按照默认规则，它会以配置类所在的包作为基础包（basepackage）来扫描组件。但是，如果你想扫描不同的包，那该怎么办呢？或者，如果你想扫描多个基础包，那又该怎么办呢？<br>有一个原因会促使我们明确地设置基础包，那就是我们想要将配置类放在单独的包中，使其与其他的应用代码区分开来。如果是这样的话，那默认的基础包就不能满足要求了。要满足这样的需求其实也完全没有问题！为了指定不同的基础包，你所需要做的就是在@ComponentScan的value属性中指明包的名称：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"soundsystem"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>如果你想更加清晰地表明你所设置的是基础包，那么你可以通过basePackages属性进行配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"soundsystem"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>可能你已经注意到了basePackages属性使用的是复数形式。如果你揣测这是不是意味着可以设置多个基础包，那么恭喜你猜对了。如果想要这么做的话，只需要将basePackages属性设置为要扫描包的一个数组即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages=&#123;<span class="string">"soundsystem"</span>,<span class="string">"video"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>在上面的例子中，所设置的基础包是以String类型表示的。我认为这是可以的，但这种方法是类型不安全（not typesafe）的。如果你重构代码的话，那么所指定的基础包可能就会出现错误了。除了将包设置为简单的String类型之外，@ComponentScan还提供了另外一种方法，那就是将其指定为包中所包含的类或接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackageClasses=&#123;CDPlayer.class, DVDPlayer.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，basePackages属性被替换成了basePackageClasses。同时，我们不是再使用String类型的名称来指定包，为basePackageClasses属性所设置的数组中包含了类。这些类所在的包将会作为组件扫描的基础包。</p>
<p>在你的应用程序中，如果所有的对象都是独立的，彼此之间没有任何依赖，就像SgtPeppersbean这样，那么你所需要的可能就是组件扫描而已。但是，很多对象会依赖其他的对象才能完成任务。这样的话，我们就需要有一种方法能够将组件扫描得到的bean和它们的依赖装配在一起。要完成这项任务，我们需要了解一下Spring自动化配置的另外一方面内容，那就是自动装配。</p>
<h2 id="通过为bean添加注解实现自动装配"><a href="#通过为bean添加注解实现自动装配" class="headerlink" title="通过为bean添加注解实现自动装配"></a><strong>通过为bean添加注解实现自动装配</strong></h2><p>简单来说，自动装配就是让Spring自动满足bean依赖的一种方法，在满足依赖的过程中，会在Spring应用上下文中寻找匹配某个bean需求的其他bean。为了声明要进行自动装配，我们可以借助Spring的@Autowired注解。</p>
<p>下面完成CDPlayer类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> soundsystem;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> CompactDisc cd;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CompactDisc cd)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cd = cd;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">    cd.play();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它的构造器上添加了@Autowired注解，这表明当Spring创建CDPlayerbean的时候，会通过这个构造器来进行实例化并且会传入一个可设置给CompactDisc类型的bean。</p>
<p>@Autowired注解不仅能够用在构造器上，还能用在属性的Setter方法上。比如说，如果CDPlayer有一个setCompactDisc()方法，那么可以采用如下的注解形式进行自动装配：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompactDisc</span><span class="params">(CompactDisc cd)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cd = cd;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Autowired注解可以用在类的任何方法上。假设CDPlayer类有一个insertDisc()方法，那么@Autowired能够像在setCompactDisc()上那样，发挥完全相同的作用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertDisc</span><span class="params">(CompactDisc cd)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cd = cd;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不管是构造器、Setter方法还是其他的方法，Spring都会尝试满足方法参数上所声明的依赖。假如有且只有一个bean匹配依赖需求的话，那么这个bean将会被装配进来。如果没有匹配的bean，那么在应用上下文创建的时候，Spring会抛出一个异常。为了避免异常的出现，你可以将@Autowired的required属性设置为false：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CompactDisc cd)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cd = cd;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将required属性设置为false时，Spring会尝试执行自动装配，但是如果没有匹配的bean的话，Spring将会让这个bean处于未装配的状态。但是，把required属性设置为false时，你需要谨慎对待。如果在你的代码中没有进行null检查的话，这个处于未装配状态的属性有可能会出现NullPointerException。如果有多个bean都能满足依赖关系的话，Spring将会抛出一个异常，表明没有明确指定要选择哪个bean进行自动装配。</p>
<p>@Autowired是Spring特有的注解。如果你不愿意在代码中到处使用Spring的特定注解来完成自动装配任务的话，那么你可以考虑将其替换为@Inject：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> soundsystem;</div><div class="line"><span class="keyword">import</span> javax.inject.Inject;</div><div class="line">importjavax.inject.Named;</div><div class="line"></div><div class="line"><span class="meta">@Named</span></div><div class="line"><span class="keyword">public</span> cladd CDPlayer&#123;</div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CompactDisc cd)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.cd = cd;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Inject注解来源于Java依赖注入规范，该规范同时还为我们定义了@Named注解。在自动装配中，Spring同时支持@Inject和@Autowired。尽管@Inject和@Autowired之间有着一些细微的差别，但是在大多数场景下，它们都是可以互相替换的。</p>
<p>现在，我们已经在CDPlayer的构造器中添加了@Autowired注解，Spring将把一个可分配给CompactDisc类型的bean自动注入进来。为了验证这一点，让我们修改一下CDPlayerTest，使其能够借助CDPlayerbean播放CD：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> soundsystem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Rule;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.contrib.java.lang.system.StandardOutputStreamLog;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes=CDPlayerConfig.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Rule</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">final</span> StandardOutputStreamLog log = <span class="keyword">new</span> StandardOutputStreamLog();</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> MediaPlayer player;</div><div class="line">  </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> CompactDisc cd;</div><div class="line">  </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cdShouldNotBeNull</span><span class="params">()</span> </span>&#123;</div><div class="line">    assertNotNull(cd);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">    player.play();</div><div class="line">    assertEquals(</div><div class="line">        <span class="string">"Playing Sgt. Pepper's Lonely Hearts Club Band by The Beatles\n"</span>, </div><div class="line">        log.getLog());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，除了注入CompactDisc，我们还将CDPlayerbean注入到测试代码的player成员变量之中（它是更为通用的<br>MediaPlayer类型）。在play()测试方法中，我们可以调用CDPlayer的play()方法，并断言它的行为与你的预期一致。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Spring中，对象无需自己查找或创建与其所关联的其他对象。相反，容器负责把需要相互协作的对象引用赋予各个对象。例如，一个订单管理组件需要信用卡认证组件，但它不需要自己创建信用卡认证组件。订单管理组件只需要表明自己两手空空，容器就会主动赋予它一个信用卡认证组件。创建应用对
    
    </summary>
    
      <category term="java读书笔记" scheme="http://yoursite.com/categories/java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Bean" scheme="http://yoursite.com/tags/Bean/"/>
    
      <category term="自动装配" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Spring实战（二）上下文Context和Bean的生命周期</title>
    <link href="http://yoursite.com/2017/06/06/Spring%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8CBean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2017/06/06/Spring实战（二）上下文和Bean的生命周期/</id>
    <published>2017-06-06T11:43:56.000Z</published>
    <updated>2017-06-06T12:29:31.892Z</updated>
    
    <content type="html"><![CDATA[<p>在基于Spring的应用中，你的应用对象生存于Spring容器（container）中。Spring容器负责创建对象，装配它们，配置它们并管理它们的整个生命周期，从生存到死亡（在这里，可能就是new到finalize()）。容器是Spring框架的核心。Spring容器使用DI管理构成应用的组件，它会创建相互协作的组件之间的关联。</p>
<p>Spring容器并不是只有一个。Spring自带了多个容器实现，可以归为两种不同的类型。<strong>bean工厂</strong>（由org.springframework.beans.factory.eanFactory接口定义）是最简单的容器，提供基本的DI支持。<strong>应用上下文</strong>（由org.springframework.context.ApplicationContext接口定义）基于BeanFactory构建，并提供应用框架级别的服务，例如从属性文件解析文本信息以及发布应用事件给感兴趣的事件监听者。但是实际应用中，我们往往都会使用应用上下文。</p>
<h1 id="使用应用上下文"><a href="#使用应用上下文" class="headerlink" title="使用应用上下文"></a>使用应用上下文</h1><p>Spring自带了多种类型的应用上下文。下面罗列的几个是你最有可能遇到的：</p>
<ul>
<li>AnnotationConfigApplicationContext：从一个或多个基于Java的配置类中加载Spring应用上下文。</li>
<li>AnnotationConfigWebApplicationContext：从一个或多个基于Java的配置类中加载SpringWeb应用上下文。</li>
<li>ClassPathXmlApplicationContext：从类路径下的一个或多个XML配置文件中加载上下文定义，把应用上下文的定义文件作为类资源。</li>
<li>FileSystemXmlapplicationcontext：从文件系统下的一个或多个XML配置文件中加载上下文定义。</li>
<li>XmlWebApplicationContext：从Web应用下的一个或多个XML配置文件中加载上下文定义。</li>
</ul>
<p>如下代码展示了如何加载一个FileSystemXmlApplicationContext：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"c:/knight.xml"</span>);</div></pre></td></tr></table></figure></p>
<p>类似地，也可以使用ClassPathXmlApplicationContext从应用的类路径下加载应用上下文：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"knight.xml"</span>);</div></pre></td></tr></table></figure></p>
<p>使用FileSystemXmlApplicationContext和使用ClassPathXmlApplicationContext的区别在于：FileSystemXmlApplicationContext在指定的文件系统路径下查找knight.xml文件；而ClassPathXmlApplicationContext是在所有的类路径（包含JAR文件）下查找knight.xml文件。</p>
<p>如果你想从Java配置中加载应用上下文，那么可以使用AnnotationConfigApplicationContext：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ApplicationContext context = <span class="keyword">new</span> AnnotaionConfigApplicationContext(</div><div class="line">    com.springinaction.knights.config.knightconfig.class);</div></pre></td></tr></table></figure></p>
<p>在这里没有指定加载Spring应用上下文所需的XML文件，AnnotationConfigApplicationContext通过一个配置类加载bean。</p>
<p>应用上下文准备就绪之后，我们就可以调用上下文的getBean()方法从Spring容器中获取bean。</p>
<h1 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h1><p><img src="/2017/06/06/Spring实战（二）上下文和Bean的生命周期/spring1.png" alt="Bean生命周期"><br>对上图进行详细描述：<br>1．Spring对bean进行实例化；<br>2．Spring将值和bean的引用注入到bean对应的属性中；<br>3．如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBeanName()方法；<br>4．如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入；<br>5．如果bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()方法，将bean所在的应用上下文的引用传入进来；<br>6．如果bean实现了BeanPostProcessor接口，Spring将调用它们的postProcessBeforeInitialization()方法；<br>7．如果bean实现了InitializingBean接口，Spring将调用它们的afterPropertiesSet()方法。类似地，如果bean使用initmethod声明了初始化方法，该方法也会被调用；<br>8．如果bean实现了BeanPostProcessor接口，Spring将调用它们的postProcessAfterInitialization()方法；<br><strong>9．此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁；</strong><br>10．如果bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法。同样，如果bean使用destroymethod声明了销毁方法，该方法也会被调用。</p>
<h1 id="Spring模块"><a href="#Spring模块" class="headerlink" title="Spring模块"></a>Spring模块</h1><p><img src="/2017/06/06/Spring实战（二）上下文和Bean的生命周期/spring2.png" alt="spring模块"><br><strong>Spring核心容器</strong><br>容器是Spring框架最核心的部分，它管理着Spring应用中bean的创建、配置和管理。在该模块中，包括了Springbean工厂，它为Spring提供了DI的功能。基于bean工厂，我们还会发现有多种Spring应用上下文的实现，每一种都提供了配置Spring的不同方式。除了bean工厂和应用上下文，该模块也提供了许多企业服务，例如E-mail、JNDI访问、EJB集成和调度。所有的Spring模块都构建于核心容器之上。当你配置应用时，其实你隐式地使用了这些类。<br><strong>Spring的AOP模块</strong><br>在AOP模块中，Spring对面向切面编程提供了丰富的支持。这个模块是Spring应用系统中开发切面的基础。与DI一样，AOP可以帮助应用对象解耦。借助于AOP，可以将遍布系统的关注点（例如事务和安全）从它们所应用的对象中解耦出来。<br><strong>数据访问与集成</strong><br>使用JDBC编写代码通常会导致大量的样板式代码，例如获得数据库连接、创建语句、处理结果集到最后关闭数据库连接。Spring的JDBC和DAO（Data Access Object）模块抽象了这些样板式代码，使我们的数据库代码变得简单明了，还可以避免因为关闭数据库资源失败而引发的问题。该模块在多种数据库服务的错误信息之上构建了一个语义丰富的异常层，以后我们再也不需要解释那些隐晦专有的SQL错误信息了！<br>对于那些更喜欢ORM（Object Relational Mapping）工具而不愿意直接使用JDBC的开发者，Spring提供了ORM模块。Spring的ORM模块建立在对DAO的支持之上，并为多个ORM框架提供了一种构建DAO的简便方式。Spring没有尝试去创建自己的ORM解决方案，而是对许多流行的ORM框架进行了集成，包括Hibernate、Java Persisternce API、Java Data Object和iBATIS SQL Maps。Spring的事务管理支持所有的ORM框架以及JDBC。<br>本模块同样包含了在JMS（Java Message Service）之上构建的Spring抽象层，它会使用消息以异步的方式与其他应用集成。从Spring 3.0开<br>始，本模块还包含对象到XML映射的特性，它最初是Spring WebService项目的一部分。<br>除此之外，本模块会使用Spring AOP模块为Spring应用中的对象提供事务管理服务。<br><strong>Web与远程调用</strong><br>MVC（Model-View-Controller）模式是一种普遍被接受的构建Web应用的方法，它可以帮助用户将界面逻辑与应用逻辑分离。Java从来不缺少MVC框架，Apache的Struts、JSF、WebWork和Tapestry都是可选的最流行的MVC框架。虽然Spring能够与多种流行的MVC框架进行集成，但它的Web和远程调用模块自带了一个强大的MVC框架，这就是SpringMVC框架，有助于在Web层提升应用的松耦合水平。<br>除了面向用户的Web应用，该模块还提供了多种构建与其他应用交互的远程调用方案。Spring远程调用功能集成了RMI（Remote Method Invocation）、Hessian、Burlap、JAX-WS，同时Spring还自带了一个远程调用框架：HTTPinvoker。Spring还提供了暴露和使用REST API的良好支持。<br><strong>Instrumentation</strong><br>Spring的Instrumentation模块提供了为JVM添加代理（agent）的功能。具体来讲，它为Tomcat提供了一个织入代理，能够为Tomcat传递类文件，就像这些文件是被类加载器加载的一样。<br><strong>测试</strong><br>鉴于开发者自测的重要性，Spring提供了测试模块以致力于Spring应用的测试。通过该模块，你会发现Spring为使用JNDI、Servlet和Portlet编写单元测试提供了一系列的mock对象实现。对于集成测试，该模块为加载Spring应用上下文中的bean集合以及与Spring上下文中的bean进行交互提供了支持。</p>
<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>Spring极大地简化了众多的编程任务，减少甚至消除了很多样板式代码，如果没有Spring的话，在日常工作中你不得不编写这样的样板代码。SpringBoot是一个崭新的令人兴奋的项目，它以Spring的视角，致力于简化Spring本身。<strong>SpringBoot大量依赖于自动配置技术，它能够消除大部分（在很多场景中，甚至是全部）Spring配置。它还提供了多个Starter项目，不管你使用Maven还是Gradle，这都能减少Spring工程构建文件的大小。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在基于Spring的应用中，你的应用对象生存于Spring容器（container）中。Spring容器负责创建对象，装配它们，配置它们并管理它们的整个生命周期，从生存到死亡（在这里，可能就是new到finalize()）。容器是Spring框架的核心。Spring容器使用
    
    </summary>
    
      <category term="java读书笔记" scheme="http://yoursite.com/categories/java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Bean" scheme="http://yoursite.com/tags/Bean/"/>
    
      <category term="Context" scheme="http://yoursite.com/tags/Context/"/>
    
      <category term="Spring模块" scheme="http://yoursite.com/tags/Spring%E6%A8%A1%E5%9D%97/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring实战（一） 依赖注入和面向切面编程</title>
    <link href="http://yoursite.com/2017/06/02/Java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Spring%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/06/02/Java读书笔记——Spring实战（一）/</id>
    <published>2017-06-02T01:15:26.000Z</published>
    <updated>2017-06-02T01:30:50.958Z</updated>
    
    <content type="html"><![CDATA[<p>Spring用bean或者JavaBean来表示应用组件，但并不意味着Spring组件必须要遵循JavaBean规范。一个Spring组件可以是任何形式的POJO。以下都采用JavaBean的广泛定义，即POJO的同义词。</p>
<p>Spring的根本使命就是简化Java开发，而为了降低Java开发的复杂性，Spring采取了以下4种关键策略：</p>
<ul>
<li>基于POJO的轻量级和最小侵入性编程；</li>
<li>通过依赖注入和面向接口实现松耦合；</li>
<li>基于切面和惯例进行声明式编程；</li>
<li>通过切面和模板减少样板式代码。</li>
</ul>
<h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><p><strong>通过DI，对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象的时候进行设定。对象无需自行创建或管理它们的依赖关系。依赖注入主要是实现松耦合。</strong></p>
<p>假如现在有一个骑士DamselRescuingKnight：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DamselRescuingKnight</span> <span class="keyword">implements</span> <span class="title">Knight</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> RescueDamselQuest quest;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DamselRescuingKnight</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.quest = <span class="keyword">new</span> RescueDamselQuest();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">embarkOnQuest</span><span class="params">()</span> </span>&#123;</div><div class="line">    quest.embark();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到DamselRescuingKnight这个类中有一个成员变量RescueDamselQuest，这是一个具体的探险任务类型，所以DamselRescuingKnight这个类型的骑士就只能执行RescueDamselQuest探险任务。这使得DamselRescuingKnight紧密地和RescueDamselQuest耦合到了一起，因此极大地限制了这个骑士执行探险的能力。<br>但是如果我们这样去实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BraveKnight</span> <span class="keyword">implements</span> <span class="title">Knight</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> Quest quest;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BraveKnight</span><span class="params">(Quest quest)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.quest = quest;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">embarkOnQuest</span><span class="params">()</span> </span>&#123;</div><div class="line">    quest.embark();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到BraveKnight没有自行创建具体的探险任务，而是在构造的时候把探险任务作为构造器参数传入。这是依赖注入的方式之一，即构造器注入（constructor injection）。更重要的是，传入的探险类型是Quest，也就是所有探险任务都必须实现的一个接口。所以，BraveKnight能够响应RescueDamselQuest、 SlayDragonQuest、 MakeRoundTableRounderQuest等任意的Quest实现。这就是DI所带来的最大收益——松耦合。</p>
<p>现在BraveKnight类可以接受你传递给它的任意一种Quest的实现，但该怎样把特定的Query实现传给它呢？假设，希望BraveKnight所要进行探险任务是杀死一只怪龙，那么SlayDragonQuest也许挺合适的。但是要怎么把SlayDragonQuest传给BraveKnight呢？</p>
<p><strong>创建应用组件之间协作的行为通常称为装配（wiring）。Spring有多种装配bean的方式，采用XML是很常见的一种装配方式。</strong>这里就可以用knights.xml把SlayDragonQuest传给BraveKnight：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">      http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"knight"</span> <span class="attr">class</span>=<span class="string">"sia.knights.BraveKnight"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--注入Quest Bean--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"quest"</span> /&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--创建SlayDragonQuest--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"quest"</span> <span class="attr">class</span>=<span class="string">"sia.knights.SlayDragonQuest"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"#&#123;T(System).out&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在这里，BraveKnight和SlayDragonQuest被声明为Spring中的bean。就BraveKnight bean来讲，它在构造时传入了对SlayDragonQuestbean的引用，将其作为构造器参数。同时，SlayDragonQuestbean的声明使用了Spring表达式语言（SpringExpressionLanguage），将System.out（这是一个PrintStream）传入到了SlayDragonQuest的构造器中。</p>
<p><strong>Spring还支持使用Java来描述配置。</strong>下面的做法和上面xml的功能是一样的，都是将SlayDragonQuest注入到BraveKnight：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sia.knights.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> sia.knights.BraveKnight;</div><div class="line"><span class="keyword">import</span> sia.knights.Knight;</div><div class="line"><span class="keyword">import</span> sia.knights.Quest;</div><div class="line"><span class="keyword">import</span> sia.knights.SlayDragonQuest;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KnightConfig</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Knight <span class="title">knight</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BraveKnight(quest());</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Quest <span class="title">quest</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SlayDragonQuest(System.out);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不管你使用的是基于XML的配置还是基于Java的配置，DI所带来的收益都是相同的。尽管BraveKnight依赖于Quest，但是它并不知道传递给它的是什么类型的Quest，也不知道这个Quest来自哪里。只有Spring通过它的配置，能够了解这些组成部分是如何装配起来的。这样的话，就可以在不改变所依赖的类的情况下，修改依赖关系。</p>
<p>现在已经声明了BraveKnight和Quest的关系，接下来我们只需要装载XML配置文件，并把应用启动起来。Spring通过应用上下文（Application Context）装载bean的定义并把它们组装起来。Spring应用上下文全权负责对象的创建和组装。Spring自带了多种应用上下文的实现，它们之间主要的区别仅仅在于如何加载配置。</p>
<p>因为knights.xml中的bean是使用XML文件进行配置的，所以选择Class Path Xml Application Context作为应用上下文相对是比较合适的。该类加载位于应用程序类路径下的一个或多个XML配置文件。下面程序中的main()方法调用ClassPathXmlApplicationContext加载knights.xml，并获得Knight对象的引用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sia.knights;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KnightMain</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">//加载Spring上下文</span></div><div class="line">    ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"META-INF/spring/knight.xml"</span>);</div><div class="line">    <span class="comment">//获取Knight Bean</span></div><div class="line">    Knight knight = context.getBean(Knight.class);</div><div class="line">    <span class="comment">//使用Knight</span></div><div class="line">    knight.embarkOnQuest();</div><div class="line">    context.close();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的main()方法基于knights.xml文件创建了Spring应用上下文。随后它调用该应用上下文获取一个ID为knight的bean。得到Knight对象的引用后，只需简单调用embarkOnQuest()方法就可以执行所赋予的探险任务了。注意这个类完全不知道我们的英雄骑士接受哪种探险任务，而且完全没有意识到这是由BraveKnight来执行的。只有knights.xml文件知道哪个骑士执行哪种探险任务。</p>
<h1 id="面向切面编程"><a href="#面向切面编程" class="headerlink" title="面向切面编程"></a>面向切面编程</h1><p><strong>DI能够让相互协作的软件组件保持松散耦合，而面向切面编程(aspect-oriented programming，AOP)允许你把遍布应用各处的功能分离出来形成可重用的组件。</strong></p>
<p>系统由许多不同的组件组成，每一个组件各负责一块特定功能。除了实现自身核心的功能之外，这些组件还经常承担着额外的职责。诸如日志、事务管理和安全这样的系统服务经常融入到本身具有核心业务逻辑的组件中去，这些系统服务通常被称为横切关注点，因为它们会跨越系统的多个组件。如果将这些关注点分散到多个组件中去，你的代码将会带来双重的复杂性：</p>
<ul>
<li>实现系统关注点功能的代码将会重复出现在多个组件中。这意味着如果你要改变这些关注点的逻辑，必须修改各个模块中的相关实现。即使你把这些关注点抽象为一个独立的模块，其他模块只是调用它的方法，但方法的调用还是会重复出现在各个模块中。</li>
<li>组件会因为那些与自身核心业务无关的代码而变得混乱。一个向地址簿增加地址条目的方法应该只关注如何添加地址，而不应该关注它是不是安全的或者是否需要支持事务。</li>
</ul>
<p>AOP能够使这些服务模块化，并以声明的方式将它们应用到它们需要影响的组件中去。所造成的结果就是这些组件会具有更高的内聚性并且会更加关注自身的业务，完全不需要了解涉及系统服务所带来复杂性。总之，AOP能够确保POJO的简单性。</p>
<p><strong>AOP的使用：</strong><br>每一个人都熟知骑士所做的任何事情，这是因为吟游诗人用诗歌记载了骑士的事迹并将其进行传唱。假设我们需要使用吟游诗人这个服务<br>类来记载骑士的所有事迹。Minstrel类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sia.knights;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.PrintStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minstrel</span> </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">private</span> PrintStream stream;</div><div class="line">      </div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Minstrel</span><span class="params">(PrintStream stream)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.stream = stream;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//探险之前调用</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singBeforeQuest</span><span class="params">()</span> </span>&#123;</div><div class="line">        stream.println(<span class="string">"Fa la la, the knight is so brave!"</span>);</div><div class="line">      &#125;</div><div class="line">    </div><div class="line">      <span class="comment">//探险之后调用</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singAfterQuest</span><span class="params">()</span> </span>&#123;</div><div class="line">        stream.println(<span class="string">"Tee hee hee, the brave knight "</span> +</div><div class="line">        		<span class="string">"did embark on a quest!"</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Minstrel是只有两个方法的简单类。在骑士执行每一个探险任务之前，singBeforeQuest()方法会被调用；在骑士完成探险任务之后，singAfterQuest()方法会被调用。在这两种情况下，Minstrel都会通过一个PrintStream类来歌颂骑士的事迹，这个类是通过构造器注入进来的。我们适当做一下调整从而让BraveKnight可以使用Minstrel：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sia.knights;</div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BraveKnight</span> <span class="keyword">implements</span> <span class="title">Knight</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> Quest quest;</div><div class="line">  <span class="keyword">private</span> Minstrel minstrel;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BraveKnight</span><span class="params">(Quest quest)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.quest = quest;</div><div class="line">    <span class="keyword">this</span>.minstrel = minstrel;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">embarkOnQuest</span><span class="params">()</span> </span>&#123;</div><div class="line">    minstrel.singBeforeQuest();</div><div class="line">    quest.embark();</div><div class="line">    minstrel.singAfterQuest();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这应该可以达到预期效果。现在，你所需要做的就是回到Spring配置中，声明Minstrel bean并将其注入到<br>BraveKnight的构造器之中。但是，管理吟游诗人的行为真的是骑士职责范围内的工作吗？在我看来，吟游诗人应该做他份内的事，根本不需要骑士命令他这么做。此外，因为骑士需要知道吟游诗人，所以就必须把吟游诗人注入到BarveKnight类中。这不仅使BraveKnight的代码复杂化了，而且还让我疑惑是否还需要一个不需要吟游诗人的骑士呢？如果Minstrel为null会发生什么呢？我是否应该引入一个空值校验逻辑来覆盖该场景？</p>
<p>但利用AOP，你可以声明吟游诗人必须歌颂骑士的探险事迹，而骑士本身并不用直接访问Minstrel的方法。要将<br>Minstrel抽象为一个切面，你所需要做的事情就是在一个Spring配置文件中声明它。下面是更新后的knights.xml文件，Minstrel被声明为一个切面：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/aop </span></div><div class="line">      http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">		http://www.springframework.org/schema/beans </div><div class="line">      http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"knight"</span> <span class="attr">class</span>=<span class="string">"sia.knights.BraveKnight"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"quest"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"quest"</span> <span class="attr">class</span>=<span class="string">"sia.knights.SlayDragonQuest"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"#&#123;T(System).out&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--声明minstrel bean--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"minstrel"</span> <span class="attr">class</span>=<span class="string">"sia.knights.Minstrel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"#&#123;T(System).out&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--定义切面--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"minstrel"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"embark"</span></span></div><div class="line">          <span class="attr">expression</span>=<span class="string">"execution(* *.embarkOnQuest(..))"</span>/&gt;</div><div class="line">      <span class="comment">&lt;!--声明前置通知--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"embark"</span> </span></div><div class="line">          <span class="attr">method</span>=<span class="string">"singBeforeQuest"</span>/&gt;</div><div class="line">      <span class="comment">&lt;!--声明后置通知--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">"embark"</span> </span></div><div class="line">          <span class="attr">method</span>=<span class="string">"singAfterQuest"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里使用了Spring的aop配置命名空间把Minstrel bean声明为一个切面。首先，需要把Minstrel声明为一个bean，然后在&lt; aop:aspect&gt;元素中引用该bean。为了进一步定义切面，声明（使用&lt; aop:before&gt;<br>）在embarkOnQuest()方法执行前调用Minstrel的singBeforeQuest()方法。这种方式被称为前置通知（before advice）。同时声明（使用&lt; aop:after&gt;）在embarkOnQuest()方法执行后调用singAfterQuest()方法。这种方式被称为后置通知（after advice）。<br>在这两种方式中，pointcut-ref属性都引用了名字为embank的切入点。该切入点是在前边的&lt; pointcut&gt;<br>元素中定义的，并配置expression属性来选择所应用的通知。表达式的语法采用的是AspectJ的切点表达式语言。这样Spring在骑士执行探险任务前后就会调用Minstrel的singBeforeQuest()和singAfterQuest()方法。</p>
<p>Minstrel仍然是一个POJO，没有任何代码表明它要被作为一个切面使用。当我们按照上面那样进行配置后，在S<br>pring的上下文中，Minstrel实际上已经变成一个切面了。其次，也是最重要的，Minstrel可以被应用到BraveKnight中，而BraveKnight不需要显式地调用它。实际上，BraveKnight完全不知道Minstrel的存在。必须还要指出的是，尽管我们使用Spring魔法把Minstrel转变为一个切面，但首先要把它声明为一个Spring bean。能够为其他Spring bean做到的事情都可以同样应用到Spring切面中，例如为它们注入依赖。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring用bean或者JavaBean来表示应用组件，但并不意味着Spring组件必须要遵循JavaBean规范。一个Spring组件可以是任何形式的POJO。以下都采用JavaBean的广泛定义，即POJO的同义词。&lt;/p&gt;
&lt;p&gt;Spring的根本使命就是简化Jav
    
    </summary>
    
      <category term="java读书笔记" scheme="http://yoursite.com/categories/java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="面向切面编程" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    
      <category term="IoC" scheme="http://yoursite.com/tags/IoC/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>编写属于自己的Service（服务）</title>
    <link href="http://yoursite.com/2017/05/31/%E7%BC%96%E5%86%99%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84Service%EF%BC%88%E6%9C%8D%E5%8A%A1%EF%BC%89/"/>
    <id>http://yoursite.com/2017/05/31/编写属于自己的Service（服务）/</id>
    <published>2017-05-31T13:10:26.000Z</published>
    <updated>2017-05-31T13:12:01.515Z</updated>
    
    <content type="html"><![CDATA[<p>用Apache james搭建自己的邮件服务器，需要运行james解压包中/bin目录下的run.sh来开启邮件服务器的，然而只能在前台开启，开启后就会邮件服务器会一直运行，也就是说这个终端窗口就不能做别的事情了，除非另外开一个终端窗口。怎样解决呢？其实可以用nohup命令让其变为后台服务。比如说我的james放在/usr/local目录下，那么我可以这么做：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup sh /usr/local/james/bin/run.sh &gt; RUNNING_REPORT 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p>
<p>nohup可以让某个程序在后台运行，用&amp;在程序结尾让程序自动运行。中间的&gt; RUNNING_REPORT是将原程序的标准输出重定向输出到RUNNING_REPORT文件中去，2&gt;&amp;1是指把标准错误输出也重定向到标准输出中去，也就是说如果有错误信息，最终也将输出到RUNNING_REPORT文件中。</p>
<p>像邮件服务器这样一个持续运行的服务更像是一个系统服务，所以我们可以把它写成自己的service。使用到的是chkconfig，chkconfig命令可以用来检查、设置系统的各种服务。一个service有启动、停止，查询状态和重启这些基础命令，所以这里有一种通用的写法：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> chkconfig: 2345 90 10</div><div class="line"><span class="meta">#</span> description:auto_run</div><div class="line"><span class="meta"></span></div><div class="line">#因为james需要java环境，如果找不到就重定向到一个已知的java环境</div><div class="line">export JAVA_HOME=$&#123;JAVA_HOME:-/usr/java/latest&#125;</div><div class="line">export JS_HOME=/usr/james</div><div class="line">export JS_BIN_DIR=$JS_HOME/bin</div><div class="line"><span class="meta">#</span>RUNNING_REPORT用来记录程序的标准输出，起到log的作用</div><div class="line">export JS_PID_FILE=$JS_HOME/RUNNING_REPORT</div><div class="line"><span class="meta"></span></div><div class="line">#启动</div><div class="line">function start &#123;</div><div class="line">    if [ -f "$JS_PID_FILE" ]; then</div><div class="line">        echo "James PID file already exists. Skipped start process"</div><div class="line">        exit 0</div><div class="line">    fi</div><div class="line"></div><div class="line">    echo "Starting james service..."</div><div class="line">    cd $JS_BIN_DIR</div><div class="line">    nohup sh run.sh &gt; $JS_PID_FILE 2&gt;&amp;1 &amp;</div><div class="line">    sleep 1</div><div class="line">&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#停止</div><div class="line">function stop &#123;</div><div class="line">    if [ -f $JS_PID_FILE ]; then</div><div class="line">        set +e</div><div class="line">        kill -9 `cat $JS_PID_FILE` &gt; /dev/null 2&gt;&amp;1 &amp;</div><div class="line">        rm -f $JS_PID_FILE</div><div class="line">        set -e</div><div class="line">        sleep 1</div><div class="line">    fi</div><div class="line">&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#状态</div><div class="line">function status &#123;</div><div class="line">    if [ -f $JS_PID_FILE ]; then</div><div class="line">        echo "James is running"</div><div class="line">    else</div><div class="line">        echo "James is not running"</div><div class="line">    fi</div><div class="line">&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#重启</div><div class="line">function restart &#123;</div><div class="line">    stop</div><div class="line">    start</div><div class="line">&#125;</div><div class="line"></div><div class="line">case "$1" in</div><div class="line">    start)</div><div class="line">    start</div><div class="line">    ;;</div><div class="line">    stop)</div><div class="line">    stop</div><div class="line">    ;;</div><div class="line">    status)</div><div class="line">    status</div><div class="line">    ;;</div><div class="line">    restart)</div><div class="line">    restart</div><div class="line">    ;;</div><div class="line">    *)</div><div class="line">    echo "Usage: $0 start|stop|status|restart"</div><div class="line">esac</div></pre></td></tr></table></figure></p>
<p>这个脚本应该很清晰，文件只需要要无后缀保存就可以了，比如保存为mailServer，然后把它放到/etc/init.d目录下，这样就可以用下面的命令来启动了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service NAME start</div></pre></td></tr></table></figure></p>
<p>其中的NAME就是文件名。</p>
<p>下面来详细讲一下chkconfig命令：<br>严格来说chkconfig命令主要用来更新（启动或停止）和查询系统服务的运行级信息。首先要弄明白什么是运行级，在Linux中，运行级别就是操作系统当前正在运行的功能级别。级别可以从0到6，具有不同的功能。这些级别定义在/ect/inittab文件中。这个文件是init程序寻找的主要文件，而最先运行的服务是那些放在/ect/rc.d目录下的文件。</p>
<p><strong>Linux下的7个运行级别：</strong><br><strong>0</strong>：系统停机状态，系统默认运行级别不能设置为0，否则不能正常启动，机器关闭。<br><strong>1</strong>：单用户工作状态，root权限，用于系统维护，禁止远程登陆，就像Windows下的安全模式登录。<br><strong>2</strong>：无网络连接的多用户命令行模式<br><strong>3</strong>：有网络连接的多用户命令行模式<br><strong>4</strong>：系统未使用状态，保留一般不用，在一些特殊情况下可以用它来做一些事情。例如在笔记本电脑的电池用尽时，可以切换到这个模式来做一些设置。<br><strong>5</strong>：带图形界面的多用户模式。<br><strong>6</strong>：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动。运行init 6机器就会重启。</p>
<p>在目录/etc/init.d下有许多服务器脚本程序，一般称为服务(service)<br>在/etc/下有7个名为rc[N].d(N为0~6)的目录，对应系统的7个运行级别<br>rc[N].d目录下都是一些符号链接文件，这些链接文件都指向init.d目录下的service脚本文件，命名规则为K+nn+服务名或S+nn+服务名，其中nn为两位数字。<br>系统会根据指定的运行级别进入对应的rc[N].d目录，并按照文件名顺序检索目录下的链接文件：对于以K开头的文件，系统将终止对应的服务； 对于以S开头的文件，系统将启动对应的服务</p>
<p>上面代码中第一行中的2345就是指运行级别。而之后的90代表Start的优先级，10代表Kill（Stop）的优先级。如果启动优先级配置的太小可能会启动不成功，因为可能它依赖的一些环境（比如网络环境）还没启动，从而导致启动失败。</p>
<p>Chkconfig有五个很明确的功能：为管理增加一个新的功能、删除一个功能、列出当前服务的启动信息、改变一个服务的启动信息和检测特殊服务的启动状态。<br>对应的命令行;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chkconfig --add name</div><div class="line">chkconfig --del name</div><div class="line">chkconfig --list [name]</div><div class="line">chkconfig [--level levels] name &lt;on|off|reset&gt;</div><div class="line">chkconfig [--level levels] name</div></pre></td></tr></table></figure></p>
<p>将需要自动启动的脚本/etc/init.d目录下，然后使用如下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --add filename</div></pre></td></tr></table></figure></p>
<p>这样就可以使服务自动注册开机启动和关机关闭。实质就是在rc0.d-rc6.d目录下生成一些文件连接，这些连接连接到/etc/init.d目录下指定文件的shell脚本。</p>
<p>所以如果我们想把上面写过的mail服务设置成开机自启，就需要先把它放到/etc/init.d目录下，然后赋予它可执行的权限：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x mailserver</div></pre></td></tr></table></figure></p>
<p>然后执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --add mailserver</div></pre></td></tr></table></figure></p>
<p>命令，或者直接在rc0.d-rc6.d目录下分别创建文件连接:<br>ln -s /etc/rc.d/init.d/auto_run /etc/rc.d/rc2.d/S99mailserver<br>ln -s /etc/rc.d/init.d/auto_run /etc/rc.d/rc3.d/S99mailserver<br>ln -s /etc/rc.d/init.d/auto_run /etc/rc.d/rc5.d/S99mailserver<br>ln -s /etc/rc.d/init.d/auto_run /etc/rc.d/rc0.d/K01mailserver<br>ln -s /etc/rc.d/init.d/auto_run /etc/rc.d/rc6.d/K01mailserver<br>这样系统在启动的时候，就会运行auto_run 并加上start参数，等同于执行命令mailserver start。<br>在系统关闭的时候，就会运行auto_run，并加上stop参数，等同于运行命令mailserver stop。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Apache james搭建自己的邮件服务器，需要运行james解压包中/bin目录下的run.sh来开启邮件服务器的，然而只能在前台开启，开启后就会邮件服务器会一直运行，也就是说这个终端窗口就不能做别的事情了，除非另外开一个终端窗口。怎样解决呢？其实可以用nohup命令
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Service" scheme="http://yoursite.com/tags/Service/"/>
    
      <category term="后台服务" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Chkconfig" scheme="http://yoursite.com/tags/Chkconfig/"/>
    
  </entry>
  
  <entry>
    <title>Java工具——FreeMaker模板引擎</title>
    <link href="http://yoursite.com/2017/05/26/Java%E5%B7%A5%E5%85%B7%E7%B1%BB%E2%80%94%E2%80%94FreeMarker/"/>
    <id>http://yoursite.com/2017/05/26/Java工具类——FreeMarker/</id>
    <published>2017-05-26T00:47:26.000Z</published>
    <updated>2017-05-26T01:36:30.604Z</updated>
    
    <content type="html"><![CDATA[<p>FreeMaker是一个模板引擎，它基于模板和数据来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)。也就是说它可以生成文件，而这些文件的格式是我们指定好的格式。文件中的内容是通过插值来填充的。也就是所谓的模板+数据=输出。</p>
<p>首先来看看FreeMarker模板文件，它是以.ftl为后缀的文件，主要由如下4个部分组成:<br>1.文本:直接输出的部分<br>2.注释:&lt;#– … –&gt;格式部分,不会输出<br>3.插值:即${…}或#{…}格式的部分,将使用数据模型中的部分替代输出<br>4.FTL指令:FreeMarker指定,和HTML标记类似,名字前加#予以区分,不会输出</p>
<p>具体编程的话，在Java中，为了使用FreeMarker将数据模型中的值合并到从模板文件生成的模板中,可按如下步骤进行:<br>1.<strong>创建配置实例</strong>：首先，创建一个Configuration的实例，然后调整它的设置。Configuration实例是存储FreeMarker应用级设置的核心部分。同时，它也处理那些创建和缓存预解析模板的工作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Configuration cfg = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_22); </div><div class="line"><span class="comment">// 指定模板文件从何处加载的数据源，这里设置成一个文件目录。 </span></div><div class="line">cfg.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(<span class="string">"/where/you/store/templates"</span>)); </div><div class="line"><span class="comment">// 指定模板如何检索数据模型，后面会讲到，先可以这么来用： </span></div><div class="line">cfg.setObjectWrapper(<span class="keyword">new</span> DefaultObjectWrapper()); </div><div class="line"><span class="comment">//指定异常处理句柄</span></div><div class="line">cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);</div><div class="line"><span class="comment">//指定默认的编码格式</span></div><div class="line">cfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure></p>
<p>这些工作只在应用(可能是servlet)生命周期的开始执行一次。<br>2.<strong>创建数据模型</strong>：<br>比如这样一个数据模型:<br>(root)<br>  |<br>  +- user = “Big Joe”<br>  |<br>  +- latest Product<br>  　　|<br>  　　+- url = “products/greenmouse.html”<br>  　　|<br>  　　+- name = “green mouse”<br>用java来构建：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建根哈希表 </span></div><div class="line">Map root = <span class="keyword">new</span> HashMap(); </div><div class="line"><span class="comment">// 在根中放入字符串"user" </span></div><div class="line">root.put(<span class="string">"user"</span>, <span class="string">"Big Joe"</span>); </div><div class="line"><span class="comment">// 为"latestProduct"创建哈希表 </span></div><div class="line">Map latest = <span class="keyword">new</span> HashMap(); </div><div class="line"><span class="comment">// 将它添加到根哈希表中 </span></div><div class="line">root.put(<span class="string">"latestProduct"</span>, latest); </div><div class="line"><span class="comment">// 在 latest 中放置"url"和"name"  </span></div><div class="line">latest.put(<span class="string">"url"</span>, <span class="string">"products/greenmouse.html"</span>); </div><div class="line">latest.put(<span class="string">"name"</span>, <span class="string">"green mouse"</span>);</div></pre></td></tr></table></figure></p>
<p>现在root就是要填充到模板template中的数据了。<br>3.<strong>获得模板</strong><br>现在有一个模板文件：test.ftl，存放在之前设置的目录中。test.ftl文件中的内容(即模板)如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome $&#123;user&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Our latestproduct:<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;latestProduct.url&#125;"</span>&gt;</span>$&#123;latestProduct.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>! </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在程序中我们可以用freemarker.template.Template来临时存储模板的格式，当我们需要一个模板实例的时候，就可以使用Configuration的getTemplate方法来获取。在之前设置的目录中，我们用test.ftl存储了示例模板，那么就可以这样来做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Template temp = cfg.getTemplate(<span class="string">"test.ftl"</span>);</div></pre></td></tr></table></figure></p>
<p>当调用这个方法的时候，将会创建一个Template实例,它是test.ftl文件经过读取和解析（编译）之后创建的模板实例。Template实例以解析后的形式存储模板，而不是以源文件的文本形式。<br>4.<strong>合并模板和数据模型</strong><br>我们都已经知道：数据模型+模板=输出，现在我们已经有了一个数据模型root和一个模板temp了，所以为了得到输出就需要合并它们。这是由模板的process方法完成的。它用数据模型root和Writer对象作为参数，然后向<br>Writer对象写入产生的内容。为简单起见，这里我们只做标准的输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Writer out = <span class="keyword">new</span> OutputStreamWriter(System.out); </div><div class="line">temp.process(root, out); </div><div class="line">out.flush();</div></pre></td></tr></table></figure></p>
<p>上面的代码会向你的终端以数据模板的格式输出数据模型的数据。<br>完整的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> freemarker.template.*; </div><div class="line"><span class="keyword">import</span> java.util.*; </div><div class="line"><span class="keyword">import</span> java.io.*; </div><div class="line"><span class="keyword">public</span> classTest &#123; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">        <span class="comment">/* 在整个应用的生命周期中，这个工作你应该只做一次。 */</span>  </div><div class="line">        <span class="comment">/* 创建和调整配置。 */</span> </div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(); </div><div class="line">        cfg.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(<span class="string">"/where/you/store/templates"</span>)); </div><div class="line">        cfg.setObjectWrapper(<span class="keyword">new</span> DefaultObjectWrapper()); </div><div class="line">       </div><div class="line">        <span class="comment">/* 在整个应用的生命周期中，这个工作你可以执行多次 */</span>  </div><div class="line">        <span class="comment">/* 获取或创建模板*/</span> </div><div class="line">        Template temp = cfg.getTemplate(<span class="string">"test.ftl"</span>); </div><div class="line">        </div><div class="line">        <span class="comment">/* 创建数据模型 */</span> </div><div class="line">        Map root = <span class="keyword">new</span> HashMap(); </div><div class="line">        root.put(<span class="string">"user"</span>, <span class="string">"Big Joe"</span>); </div><div class="line">        Map latest = <span class="keyword">new</span> HashMap(); </div><div class="line">        root.put(<span class="string">"latestProduct"</span>, latest); </div><div class="line">        latest.put(<span class="string">"url"</span>, <span class="string">"products/greenmouse.html"</span>); </div><div class="line">        latest.put(<span class="string">"name"</span>, <span class="string">"green mouse"</span>); </div><div class="line">       </div><div class="line">        <span class="comment">/* 将模板和数据模型合并 */</span> </div><div class="line">        Writer out = <span class="keyword">new</span> OutputStreamWriter(System.out);</div><div class="line">        temp.process(root, out); </div><div class="line">        out.flush(); </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面已经讲了基本用法，现在进行更深入的理解：</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a><strong>Configuration</strong></h2><p>Configuration存储了常用(全局，应用程序级)的设置，定义了想要在所有模板中可用的变量(称为共享变量)。 而且，它会处理 Template 实例的新建和缓存。通常使用一个共享的单实例Configuration对象。</p>
<p><strong>设置共享变量</strong>，是为所有模板所定义的变量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cfg.setSharedVariable(String name,Object obj);</div></pre></td></tr></table></figure></p>
<p>比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Configuration cfg = <span class="keyword">new</span> Configuration();</div><div class="line">...</div><div class="line">cfg.setSahredVariable(<span class="string">"wrap"</span>, <span class="keyword">new</span> WrapDirective());</div><div class="line"><span class="comment">// 使用 ObjectWrapper.DEFAULT_WRAPPER </span></div><div class="line">cfg.setSharedVariable(<span class="string">"company"</span>, <span class="string">"Foo Inc."</span>);</div></pre></td></tr></table></figure></p>
<p>上面这段代码表示：<br>在所有使用这个配置的模板中，名为wrap的用户自定义指令。<br>一个名为company的字符串将会在数据模型的根上可见，这样就不用在根哈希表上一次又一次的添加它们。在传递给Template.process根对象里的变量将会隐藏同名的共享变量。<br>警告：如果配置对象在多线程环境中使用，不要使用TemplateModel实现类来作为共享变量，因为它是线程不安全的。这也是基于Servlet的Web站点的典型情况。</p>
<p><strong>配置设置</strong><br>配置设置有很多， 例如：locale，number_format，default_encoding， template_exception_handler。<br>比如说设置编码格式:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure></p>
<p>那么使用该配置的所有模板的编码格式都是UTF-8。<br>配置信息可以被想象成3层(Configuration， Template，Environment)，最高层包含特定的值，它为设置信息提供最有效的值。 比如(设置信息A到F仅仅是为这个示例而构想的)：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Setting A</th>
<th style="text-align:center">Setting B</th>
<th style="text-align:center">Setting C</th>
<th style="text-align:center">Setting D</th>
<th style="text-align:center">Setting E</th>
<th>Setting F</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Layer 3: Environment</td>
<td style="text-align:center">1</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">1</td>
<td style="text-align:center">-</td>
<td>-</td>
</tr>
<tr>
<td style="text-align:center">Layer 2: Template</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">2</td>
<td>-</td>
</tr>
<tr>
<td style="text-align:center">Layer 1: Configuration</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">-</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>配置信息的有效值为：A=1，B=2，C=3，D=1，E=2。 而F的设置则是null，或者在你获取它的时候将抛出异常。</p>
<ul>
<li><p>Configuration 层： 原则上设置配置信息时使用 Configuration 对象的setter方法，例如：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Configuration myCfg = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23);</div><div class="line">myCfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);</div><div class="line">myCfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure>
<p> 在真正使用 Configuration 对象 (通常在初始化应用程序时)之前来配置它，后面必须将其视为只读的对象。</p>
</li>
<li><p>Template层：对于被请求的本地化信息，也就是模板的locale 设置，它由Configuration.getTemplate(…) 来设置。但是如果我们想控制Template对象来代替freemarker.cache.TemplateCache的话，就应该在Template对象第一次被使用前就设置配置信息，然后就将Template对象视为是只读的。</p>
</li>
<li><p>Environment 层：这里有两种配置方法：<br> 一是使用Java API：使用 Environment对象的setter方法。当然这需要在模板执行之前来做。但是我们如果直接调用myTemplate.process(…) 就会遇到问题，因为在内部创建Environment对象后立即就执行模板了，导致没有机会来进行设置。这个问题的解决可以用下面两个步骤进行：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Environment env = myTemplate.createProcessingEnvironment(root, out);</div><div class="line">env.setLocale(java.util.Locale.ITALY); </div><div class="line">env.setNumberFormat(<span class="string">"0.####"</span>);</div><div class="line">env.process();  <span class="comment">// process the template</span></div></pre></td></tr></table></figure>
<p> 二是在模板中直接使用setting指令，但是这种方法并不推荐，例如：</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;#setting locale="it_IT"&gt;</div><div class="line">&lt;#setting number_format="0.####"&gt;</div></pre></td></tr></table></figure>
<p> 在Environment层中，什么时候改变配置信息是没有限制的。</p>
</li>
</ul>
<p><strong>模板加载</strong><br>模板加载器加载基于抽象模板路径下的比如 “index.ftl” 或 “products/catalog.ftl”的原生文本数据对象。加载完毕之后，它会解析文本来生成模板。</p>
<ul>
<li><p>内建模板加载器：<br> 在 Configuration 中可以使用下面的方法来建立三种不同的模板加载器。 (每种方法都会在其内部新建一个模板加载器对象，然后创建 Configuration 实例来使用它。)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDirectoryForTemplateLoading</span><span class="params">(File dir)</span></span>;</div></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setClassForTemplateLoading</span><span class="params">(Class cl, String prefix)</span></span>;</div></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setServletContextForTemplateLoading</span><span class="params">(Object servletContext, String path)</span></span>;</div></pre></td></tr></table></figure>
<p> 上述的第一种方法在磁盘的文件系统上设置了一个明确的目录， 它确定了从哪里加载模板。<br> 第二种调用方法的参数是一个类和一个路径前缀，参数prefix是给模板的名称来加前缀的，其实就是文件相对于给定类的路径。这个方法顾名思义就是通过获得给定类的相对位置以及之后的prefix参数来获得template文件。这样方便我们将template文件一起打成jar包使用。经验之谈，这里prefix必须以“/”开头。<br> 第三种调用方式需要Web应用的上下文和一个基路径作为参数，这个基路径是Web应用根路径(WEB-INF目录的上级目录)的相对路径。加载器会从Web应用目录开始加载模板。而且加载方法对没有打包的.war文件也起作用，因为它使用了ServletContext.getResource()方法来访问模板。比如： setServletContextForTemplateLoading(context, “/ftl”) 就是 /WebRoot/ftl目录。</p>
</li>
<li><p>从多个位置加载模板:<br> 如果需要从多个位置加载模板，那就不得不为每个位置都实例化模板加载器对象，将他们封装成一个MultiTemplateLoader的特殊模板加载器，最终传给Configuration对象的setTemplateLoader(TemplateLoader loader)方法。如从/user/data/templates和/temp/templates两个地方加载模板可以这么做：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">FileTemplateLoader ftl1 = <span class="keyword">new</span> FileTemplateLoader(<span class="keyword">new</span> File(<span class="string">"/temp/templates"</span>));  </div><div class="line">FileTemplateLoader ftl2 = <span class="keyword">new</span> FileTemplateLoader(<span class="keyword">new</span> File(<span class="string">"/user/data/templates"</span>));  </div><div class="line">ClassTemplateLoader ctl1 = <span class="keyword">new</span> ClassTemplateLoader(TemplateLoaderTest.class, <span class="string">"/"</span>);  </div><div class="line">TemplateLoader[] loaders = <span class="keyword">new</span> TemplateLoader[]&#123;ftl1, ftl2, ctl1&#125;;  </div><div class="line">MultiTemplateLoader mtl = <span class="keyword">new</span> MultiTemplateLoader(loaders);  </div><div class="line">cfg.setTemplateLoader(mtl);</div></pre></td></tr></table></figure>
<p> 现在，FreeMarker将会尝试从 /tmp/templates目录加载模板，如果在这个目录下没有发现请求的模板，它就会继续尝试从/usr/data/templates 目录下加载，如果还是没有发现请求的模板， 那么它就会使用类加载器来加载模板。</p>
</li>
<li><p>从其他资源加载模板<br>如果内建的类加载器都不适合使用，那么就需要来编写自己的类加载器了，这个类需要实现freemarker.cache.TemplateLoader接口，然后将它传递给Configuration对象的setTemplateLoader(TemplateLoader loader)方法。可以阅读API JavaDoc文档获取更多信息。如果模板需要通过URL访问其他模板，那么就不需要实现TemplateLoader接口了，可以选择子接口freemarker.cache.URLTemplateLoader来替代，只需实现URLgetURL(String templateName)方法即可。</p>
</li>
</ul>
<p>完整的FreeMaker学习资料：<a href="https://github.com/yuchengxin/FreeMarker_2.3.23_Manual_zh_CN.git">FreeMarker_2.3.23_Manual_zh_CN</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FreeMaker是一个模板引擎，它基于模板和数据来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)。也就是说它可以生成文件，而这些文件的格式是我们指定好的格式。文件中的内容是通过插值来填充的。也就是所谓的模板+数据=输出。&lt;/p&gt;
&lt;p&gt;首先来看看FreeMar
    
    </summary>
    
      <category term="java工具" scheme="http://yoursite.com/categories/java%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="FreeMaker" scheme="http://yoursite.com/tags/FreeMaker/"/>
    
      <category term="模板引擎" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Head First设计模式-策略模式</title>
    <link href="http://yoursite.com/2017/05/23/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/05/23/java设计模式-策略模式/</id>
    <published>2017-05-23T00:59:26.000Z</published>
    <updated>2017-05-26T01:25:27.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计原则："><a href="#设计原则：" class="headerlink" title="设计原则："></a><strong>设计原则：</strong></h1><ul>
<li>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起。把会变化的部分取出并封装起来，好让其他部分不会受到影响。</li>
<li>针对接口编程，而不是针对实现编程。“针对接口编程”的真正意思是针对超类编程。即：变量的申明类应该是超类型，通常是一个抽象类或者一个接口，如此，只要是具体实现此超类的类所产生的对象，都可以指定给这个变量。这也意味着，声明类时不用理会以后执行时的真正对象类型。</li>
<li>多用组合，少用继承</li>
</ul>
<h1 id="举例："><a href="#举例：" class="headerlink" title="举例："></a><strong>举例：</strong></h1><p>世界上有各种鸭子，它们外观不同，但是都会游泳，也都会叫。用传统的面向对象的思路来设计，首先有一个Duck的抽象超类，并让各种鸭子继承这个超类。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Duck</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">quack()//鸭子叫的方法</td>
</tr>
<tr>
<td style="text-align:left">swim()//鸭子游泳的方法</td>
</tr>
<tr>
<td style="text-align:left">display()//鸭子外观的方法</td>
</tr>
</tbody>
</table>
<p>如果是传统的面向对象思想，所有的鸭子都会叫，也都会游泳，所以quack()方法和swim()方法放在超类Duck中实现，而由于每只鸭子的外观不同，所以display()方法在Duck类中设计成抽象方法，由具体的鸭子继承超类后自己去实现。比如现在有绿头鸭MallardDuck和红头鸭ReaheadDuck，它们继承超类Duck，所以有了quack和swim的功能，同时实现display方法从而有了不同的外观。</p>
<p>但是这样设计有一个问题：<br>需求开始增加，经过分析，发现鸭子都会飞，所以要给鸭子加上飞的功能。最普通的方法是在Duck超类中加一个fly()的方法并实现。这样每一个鸭子继承Duck之后就有了fly()的功能。但是发现需求有误，实际上并不是所有鸭子都会飞。比如尖叫鸭（类似于尖叫鸡），会叫也会游泳，但是尖叫鸭的叫声是“吱吱”，而不是普通鸭子的“咕咕”。所以尖叫鸭继承Duck之后首先要覆盖掉超类中的quack()方法。最严重的问题是尖叫鸭不会飞，但是继承Duck后它有了飞的功能，这肯定不对。同样的方法就是子类继承超类之后覆盖掉Duck中的fly()方法。但是，如果以后还要加入另一种诱饵鸭子，它其实是一个木头假鸭，不会叫也不会飞。难道又要覆盖掉quack()方法和fly()方法吗？这样太不优雅了。可以看到用继承的方式来提供Duck的行为，会使代码牵一发动全身，不便于维护，也不便于扩展。</p>
<p>所以需要一个更清晰的方法，让“某些”而不是全部鸭子可飞或者可叫。<br>很自然的一种想法是把飞好叫的行为从Duck超类拿出来，另外设计成接口：Flyable和Quackable。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Duck//抽象类</th>
<th></th>
<th style="text-align:left">Flyable//接口</th>
<th></th>
<th style="text-align:left">Quackable//接口</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">swim()//普通方法</td>
<td></td>
<td style="text-align:left">fly()//接口中的抽象方法</td>
<td></td>
<td style="text-align:left">quack()//接口中的抽象方法</td>
</tr>
<tr>
<td style="text-align:left">display()//抽象方法</td>
<td></td>
<td style="text-align:left"></td>
<td></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>这样尖叫鸭可以继承Duck超类，同时实现Quackable接口，而普通鸭子可以继承Duck超类并同时实现Flyable和Quack接口，但是可以看到，每实现一次接口就要重写一此接口中的方法，重复的代码就会急剧增加。显然这不是一种好的方法。</p>
<p>可以看出造成目前这种困境的原因是需求一直在改变。而现实中需求的改变又恰恰是经常会出现的问题。这个时候就要<strong>找出应用中可能需要经常变化的地方，把他们独立出来，不要和那些不需要变化的代码混在一起。也就是把会变化的部分取出并封装起来，好让其他部分不会受到影响。</strong><br>那么具体到这个例子中要怎么做呢？首先在原始的Duck类中把fly()和quack()拿掉，然后建立两组类，一类与fly相关，一类与quack相关，它们分别实现FlyBehavior和QuackBehavior接口。每一组类将实现各自的动作，可能有一个类实现Quackbehhavior接口完成了“咕咕叫”(Quack类)，另一个类实现Quackbehhavior接口完成了“吱吱叫”(SQuack类)，还有一个类实现Quackbehhavior接口完成了“安静”(MuteQuack类)。另外还有一个类实现FlyBehavior接口完成了“飞”的功能（FlyWithSwing类），还有一个类实现FlyBehavior接口完成了“不能飞”（FlyNoWay类）。<br>但仅仅是这样还不够，因为Java中并没有多继承，如果继承了Duck超类，就不能继承那些实现了FlyBehavior或QuackBehavior的具体实现类。所以要想一种办法把Duck类和我们分离出来的行为整合起来。其实就是在Duck类中添加FlyBehavior和QuackBehavior的属性：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Duck</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">FlyBehavior flyBehavior//飞属性</td>
</tr>
<tr>
<td style="text-align:left">QuackBehavior quackBehavior//叫属性</td>
</tr>
<tr>
<td style="text-align:left">swim()//鸭子游泳的方法</td>
</tr>
<tr>
<td style="text-align:left">display()//鸭子外观的方法</td>
</tr>
<tr>
<td style="text-align:left">performFly()//飞行方法</td>
</tr>
<tr>
<td style="text-align:left">performQuack()//叫方法</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span>&#123;</div><div class="line">    FlyBehavior flyBehavior;</div><div class="line">    QuackBehavior quackBehavior;</div><div class="line">    </div><div class="line">    <span class="comment">//set、get方法</span></div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span></span>&#123;</div><div class="line">        flyBehavior.fly();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span></span>&#123;</div><div class="line">        quackBehavior.quack();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样当我们实现尖叫鸭的时候：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreamDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScreamDuck</span><span class="params">()</span></span>&#123;</div><div class="line">        quackBehavior = <span class="keyword">new</span> SQuack();</div><div class="line">        flyBehavior = <span class="keyword">new</span> FlyNoWay();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就实现了一个尖叫鸭。而普通绿头鸭子就是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span></span>&#123;</div><div class="line">        quackBehavior = <span class="keyword">new</span> Quack();</div><div class="line">        flyBehavior = <span class="keyword">new</span> FlyWithSwing();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样维护和扩展都容易多了。</p>
<p>这就是<strong>策略模式</strong>，<br>**</p>
<h1 id="策略模式的定义："><a href="#策略模式的定义：" class="headerlink" title="策略模式的定义："></a><strong>策略模式的定义：</strong></h1><p>**<br>定义了算法簇，分别封装起来，让它们之间可以互相替换。这个模式可以让算法的变化独立于使用算法的客户。</p>
<h1 id="策略模式的结构："><a href="#策略模式的结构：" class="headerlink" title="策略模式的结构："></a><strong>策略模式的结构：</strong></h1><p><img src="http://my.csdn.net/uploads/201205/11/1336732187_4598.jpg" alt="策略模式的结构"></p>
<p>**</p>
<h1 id="策略模式的组成："><a href="#策略模式的组成：" class="headerlink" title="策略模式的组成："></a><strong>策略模式的组成：</strong></h1><p><strong>环境类(Context)</strong>:用一个ConcreteStrategy对象来配置。维护一个对Strategy对象的引用。可定义一个接口来让Strategy访问它的数据。<br><strong>抽象策略类(Strategy)</strong>:定义所有支持的算法的公共接口。Context使用这个接口来调用某ConcreteStrategy定义的算法。<br><strong>具体策略类(ConcreteStrategy)</strong>:以Strategy接口实现某具体算法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计原则：&quot;&gt;&lt;a href=&quot;#设计原则：&quot; class=&quot;headerlink&quot; title=&quot;设计原则：&quot;&gt;&lt;/a&gt;&lt;strong&gt;设计原则：&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码
    
    </summary>
    
      <category term="java读书笔记" scheme="http://yoursite.com/categories/java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="http://yoursite.com/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
